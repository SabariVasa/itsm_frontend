"use strict";

var DisableOnSubmitMixin, HelpMixin, NumberField, React, SingleInputMixin, StandardErrorDisplayMixin, ValidationMixin;

React = require("react");

SingleInputMixin = require("./mixins/SingleInput");

ValidationMixin = require("./mixins/Validation");

StandardErrorDisplayMixin = require("./mixins/StandardErrorDisplay");

DisableOnSubmitMixin = require("./mixins/DisableOnSubmit");

HelpMixin = require("./mixins/Help");

NumberField = React.createClass({
  displayName: "NumberField",

  mixins: [SingleInputMixin, ValidationMixin, StandardErrorDisplayMixin, DisableOnSubmitMixin, HelpMixin],
  propTypes: {
    data: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    dataKey: React.PropTypes.string,
    min: React.PropTypes.number,
    max: React.PropTypes.number,
    step: React.PropTypes.number
  },
  onChange: function onChange(event) {
    var value;
    value = event.target.value;
    return this.validate(value, (function (_this) {
      return function () {
        return _this.props.onDataChanged(_this.props.dataKey, value);
      };
    })(this));
  },
  render: function render() {
    var label, size;
    if (this.props.displayName !== false) {
      label = React.createElement(
        "label",
        { className: "col-sm-2 control-label", htmlFor: this.props.dataKey },
        this.props.displayName
      );
    }
    size = this.props.displayName === false ? "col-sm-12" : "col-sm-10";
    return React.createElement(
      "div",
      { className: this.errorClasses("form-group") },
      label,
      React.createElement(
        "div",
        { className: size },
        React.createElement("input", {
          type: "number",
          className: "form-control",
          name: this.props.dataKey,
          value: this.props.data,
          onChange: this.onChange,
          disabled: this.disabled(),
          placeholder: this.props.placeholder,
          title: this.props.title,
          onKeyPress: this.submitOnEnter,
          step: this.props.step,
          min: this.props.min,
          max: this.props.max
        }),
        this.errorSpan(),
        this.helpSpan()
      )
    );
  }
});

module.exports = NumberField;