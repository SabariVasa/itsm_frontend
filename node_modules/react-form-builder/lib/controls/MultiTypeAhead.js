"use strict";

var DataSourcedMixin, DisableOnSubmitMixin, Input, Matches, MultiTypeAheadField, MultiTypeAheadLabel, React, StandardErrorDisplayMixin, TypeAheadMixin, ValidationMixin, any, difference, isEqual, map, updateState;

React = require("react");

updateState = require("react-addons-update");

DataSourcedMixin = require("./mixins/DataSourced");

ValidationMixin = require("./mixins/Validation");

StandardErrorDisplayMixin = require("./mixins/StandardErrorDisplay");

DisableOnSubmitMixin = require("./mixins/DisableOnSubmit");

TypeAheadMixin = require("./TypeAhead/Mixin");

Matches = require("./TypeAhead/Matches");

Input = require("./TypeAhead/Input");

MultiTypeAheadLabel = require("./TypeAhead/Label");

map = require("lodash/map");

any = require("lodash/some");

isEqual = require("lodash/isEqual");

difference = require("lodash/difference");

MultiTypeAheadField = React.createClass({
  displayName: "MultiTypeAheadField",

  mixins: [DataSourcedMixin, ValidationMixin, StandardErrorDisplayMixin, DisableOnSubmitMixin, TypeAheadMixin],
  propTypes: {
    displayName: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.bool]),
    dataKey: React.PropTypes.string.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      hiddenList: true,
      highlightedIndex: -1,
      item: {},
      items: [],
      options: [],
      clearCount: 0
    };
  },
  selectItem: function selectItem(item) {
    var itemAlredyInList, update;
    itemAlredyInList = any(this.state.items, function (i) {
      return isEqual(i, item);
    });
    update = updateState(this.state, {
      options: {
        $set: []
      },
      hiddenList: {
        $set: true
      },
      highlightedIndex: {
        $set: -1
      },
      item: {
        $set: {}
      },
      items: {
        $push: itemAlredyInList ? [] : [item]
      },
      clearCount: {
        $set: this.state.clearCount + 1
      }
    });
    return this.setState(update, (function (_this) {
      return function () {
        var newItems;
        if (!itemAlredyInList) {
          newItems = map(_this.state.items, function (i) {
            return i.value;
          });
          return _this.props.onDataChanged(_this.props.dataKey, newItems);
        }
      };
    })(this));
  },
  removeItem: function removeItem(item) {
    var update;
    update = updateState(this.state, {
      items: {
        $set: difference(this.state.items, [item])
      }
    });
    return this.setState(update, (function (_this) {
      return function () {
        var newItems;
        newItems = map(_this.state.items, function (i) {
          return i.value;
        });
        return _this.props.onDataChanged(_this.props.dataKey, newItems);
      };
    })(this));
  },
  renderLabels: function renderLabels() {
    return map(this.state.items, (function (_this) {
      return function (item) {
        return React.createElement(MultiTypeAheadLabel, { item: item, onClick: _this.removeItem, key: "label" + item.displayName });
      };
    })(this));
  },
  render: function render() {
    var size;
    size = this.props.displayName === false ? "col-sm-12" : "col-sm-10";
    return React.createElement(
      "div",
      { className: this.errorClasses("form-group", "has-feedback") },
      this.renderLabel(),
      React.createElement(
        "div",
        { className: size },
        React.createElement(
          Input,
          {
            dataKey: this.props.dataKey,
            emptyList: this.state.hiddenList || this.state.options.length == 0,
            item: this.formattedItem(),
            clearCount: this.state.clearCount,
            free: this.props.free,
            disabled: this.disabled() || this.state.loadingItem,
            placeholder: this.props.placeholder,
            title: this.props.title,
            loading: this.state.loadingOptions || this.state.loadingItem,
            onChange: this.onChange,
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            onKeyDown: this.onKeyDown,
            onKeyUp: this.onKeyUp
          },
          React.createElement(Matches, {
            ref: "list",
            matches: this.state.options,
            highlightedIndex: this.state.highlightedIndex,
            hidden: this.state.hiddenList,
            onSelect: this.selectItem
          }),
          this.errorSpan()
        ),
        React.createElement(
          "div",
          { className: "tag-container" },
          this.renderLabels()
        )
      )
    );
  }
});

module.exports = MultiTypeAheadField;