"use strict";

var ValidationMixin, flatten, map, without;

map = require("lodash/map");

flatten = require("lodash/flatten");

without = require("lodash/without");

ValidationMixin = {
  getInitialState: function getInitialState() {
    return {
      validationErrors: [],
      hasErrors: false
    };
  },
  validate: function validate(value, callback) {
    var newErrors;
    if (this.props.validators) {
      newErrors = map(this.props.validators, (function (_this) {
        return function (validator) {
          return validator.validate(value, _this.props.displayName);
        };
      })(this));
      newErrors = flatten(newErrors);
      newErrors = without(newErrors, null, void 0);
      return this.setState({
        validationErrors: newErrors,
        hasErrors: newErrors.length !== 0
      }, callback());
    } else {
      if (callback) {
        return callback();
      }
    }
  }
};

module.exports = ValidationMixin;