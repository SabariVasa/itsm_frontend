"use strict";

var React,
    StandardErrorDisplayMixin,
    capitalize,
    classnames,
    fromPairs,
    map,
    select,
    uniq,
    slice = [].slice;

React = require("react");

classnames = require("classnames");

fromPairs = require("lodash/fromPairs");

map = require("lodash/map");

uniq = require("lodash/uniq");

select = require("lodash/filter");

capitalize = require("lodash/capitalize");

StandardErrorDisplayMixin = {
  propTypes: {
    dataKey: React.PropTypes.string.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      errors: []
    };
  },
  errorClasses: function errorClasses() {
    var class_list, list_of_classes;
    list_of_classes = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    class_list = fromPairs(map(list_of_classes, function (c) {
      return [c, true];
    }));
    class_list["has-error"] = this.state.hasErrors;
    return classnames(class_list);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var errors, ref, ref1, serverErrors;
    serverErrors = map(uniq(map(select((ref = nextProps.serverErrors) != null ? ref.errors : void 0, function (e) {
      return e.field === nextProps.dataKey;
    }), function (serverError) {
      return serverError.message;
    })), function (message) {
      return capitalize(message);
    });
    errors = ((ref1 = this.state.validationErrors) != null ? ref1.length : void 0) > 0 ? this.state.validationErrors : serverErrors;
    if (errors.length > 0) {
      return this.setState({
        hasErrors: true,
        errors: errors
      });
    } else {
      return this.setState({
        hasErrors: false,
        errors: []
      });
    }
  },
  errorSpan: function errorSpan() {
    var errorView;
    if (this.state.hasErrors) {
      return errorView = React.createElement(
        "span",
        { className: "help-block" },
        this.state.errors.join(", ")
      );
    }
  }
};

module.exports = StandardErrorDisplayMixin;