"use strict";

var DisableOnSubmitMixin, Field, NestedFieldGroup, React, ReactBootstrap, StandardErrorDisplayMixin, clone, map;

React = require("react");

ReactBootstrap = require("react-bootstrap");

Field = require("./NestedFieldGroup/Field");

DisableOnSubmitMixin = require("./mixins/DisableOnSubmit");

StandardErrorDisplayMixin = require("./mixins/StandardErrorDisplay");

map = require("lodash/map");

clone = require("lodash/clone");

NestedFieldGroup = React.createClass({
  displayName: "NestedFieldGroup",

  mixins: [DisableOnSubmitMixin, StandardErrorDisplayMixin],
  getDefaultProps: function getDefaultProps() {
    return {
      type: "text-field"
    };
  },
  getInitialState: function getInitialState() {
    return {
      baseIndex: 0,
      alternativeView: this.props.type === "text-field"
    };
  },
  componentDidUpdate: function componentDidUpdate() {
    return this.setTextAreaHeight();
  },
  componentDidMount: function componentDidMount() {
    return this.setTextAreaHeight();
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var nextLength, prevLength;
    prevLength = this.props.data.length;
    nextLength = nextProps.data.length;
    if (prevLength !== nextLength) {
      return this.setState({
        baseIndex: this.state.baseIndex + prevLength
      });
    }
  },
  setTextAreaHeight: function setTextAreaHeight() {
    var node, textarea;
    textarea = this.refs.textarea;
    if (textarea) {
      node = textarea;
      return node.style.height = node.scrollHeight + "px";
    }
  },
  toggleView: function toggleView() {
    return this.setState({
      alternativeView: !this.state.alternativeView
    });
  },
  add: function add() {
    var newData;
    newData = clone(this.props.data);
    newData.push(null);
    return this.props.onDataChanged(this.props.dataKey, newData);
  },
  nestedFieldChanged: function nestedFieldChanged(dataKey, value) {
    var newData;
    newData = clone(this.props.data);
    newData[dataKey] = value;
    return this.props.onDataChanged(this.props.dataKey, newData);
  },
  textAreaChanged: function textAreaChanged(event) {
    var newData;
    newData = event.target.value.split(/\r?\n/);
    return this.props.onDataChanged(this.props.dataKey, newData);
  },
  remove: function remove(dataKey) {
    var newData;
    newData = clone(this.props.data);
    newData.splice(dataKey, 1);
    return this.props.onDataChanged(this.props.dataKey, newData);
  },
  renderToggleButton: function renderToggleButton() {
    var iconName;
    if (this.props.type === "text-field") {
      iconName = this.props.alternativeView ? "th-list" : "align-justify";
      return React.createElement(
        ReactBootstrap.Button,
        { onClick: this.toggleView, className: "pull-left", disabled: this.disabled() },
        React.createElement(ReactBootstrap.Glyphicon, { glyph: iconName })
      );
    }
  },
  renderMainView: function renderMainView() {
    return React.createElement(
      "div",
      null,
      this.renderNestedFields(),
      React.createElement(
        "div",
        { className: "row" },
        React.createElement(
          "div",
          { className: "col-md-12" },
          this.renderToggleButton(),
          React.createElement(
            ReactBootstrap.Button,
            { onClick: this.add, className: "pull-right" },
            React.createElement(ReactBootstrap.Glyphicon, { glyph: "plus" })
          )
        )
      )
    );
  },
  renderNestedFields: function renderNestedFields() {
    return map(this.props.data, (function (_this) {
      return function (data, index) {
        var key, onEnter;
        onEnter = index === _this.props.data.length - 1 ? _this.add : void 0;
        key = _this.props.dataKey + "[" + (_this.state.baseIndex + index) + "]";
        return React.createElement(Field, {
          key: key,
          displayName: false,
          type: _this.props.type,
          formData: _this.props.formData,
          data: data,
          dataKey: index,
          onDataChanged: _this.nestedFieldChanged,
          onEnter: onEnter,
          onRemove: _this.remove
        });
      };
    })(this));
  },
  renderAlternativeView: function renderAlternativeView() {
    return React.createElement(
      "div",
      null,
      React.createElement(
        "div",
        { className: "row" },
        React.createElement(
          "div",
          { className: "col-md-12" },
          React.createElement(
            "div",
            { className: "form-group textarea-nested-field" },
            React.createElement("textarea", {
              ref: "textarea",
              className: "form-control",
              name: this.props.dataKey,
              defaultValue: this.props.data.join("\n"),
              onChange: this.textAreaChanged,
              disabled: this.disabled()
            })
          )
        )
      ),
      React.createElement(
        "div",
        { className: "row" },
        React.createElement(
          "div",
          { className: "col-md-12" },
          React.createElement(
            "span",
            { className: "help-block pull-right" },
            "Write one per statement per line or change view"
          ),
          this.renderToggleButton()
        )
      )
    );
  },
  renderView: function renderView() {
    if (this.state.alternativeView) {
      return this.renderAlternativeView();
    } else {
      return this.renderMainView();
    }
  },
  render: function render() {
    var label, size;
    if (this.props.displayName !== false) {
      label = React.createElement(
        "label",
        { className: "col-sm-2 control-label", htmlFor: this.props.dataKey },
        this.props.displayName
      );
    }
    size = this.props.displayName === false ? "col-sm-12" : "col-sm-10";
    return React.createElement(
      "div",
      { className: this.errorClasses("form-group") },
      label,
      React.createElement(
        "div",
        { className: size },
        this.renderView()
      )
    );
  }
});

module.exports = NestedFieldGroup;