"use strict";

var DisableOnSubmitMixin, FileSelect, HelpMixin, React, ReactBootstrap, SingleInputMixin, StandardErrorDisplayMixin, ValidationMixin, classnames;

React = require("react");

classnames = require("classnames");

SingleInputMixin = require("./mixins/SingleInput");

ValidationMixin = require("./mixins/Validation");

StandardErrorDisplayMixin = require("./mixins/StandardErrorDisplay");

DisableOnSubmitMixin = require("./mixins/DisableOnSubmit");

HelpMixin = require("./mixins/Help");

ReactBootstrap = require("react-bootstrap");

FileSelect = React.createClass({
  displayName: "FileSelect",

  mixins: [SingleInputMixin, ValidationMixin, StandardErrorDisplayMixin, DisableOnSubmitMixin, HelpMixin],
  propTypes: {
    dataKey: React.PropTypes.string
  },
  getInitialState: function getInitialState() {
    var ref;
    return {
      filename: (ref = this.props.filename) != null ? ref : void 0,
      dragging: false
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      dragAndDrop: true
    };
  },
  onInputChange: function onInputChange(event) {
    if (event.target.files[0]) {
      return this.fileWasSelected(event.target.files[0]);
    }
  },
  onDragEnter: function onDragEnter(event) {
    var ref;
    if (!this.props.dragAndDrop) {
      return;
    }
    if (((ref = event.dataTransfer.types) != null ? ref[0] : void 0) === "Files") {
      return this.setState({
        dragging: true
      });
    }
  },
  onDragLeave: function onDragLeave(event) {
    if (!this.props.dragAndDrop) {
      return;
    }
    return this.setState({
      dragging: false
    });
  },
  onDragOver: function onDragOver(event) {
    return event.preventDefault();
  },
  onDrop: function onDrop(event) {
    var ref;
    if (!this.props.dragAndDrop) {
      return;
    }
    this.setState({
      dragging: false
    });
    if (((ref = event.dataTransfer.types) != null ? ref[0] : void 0) === "Files") {
      this.fileWasSelected(event.dataTransfer.files[0]);
    }
    return false;
  },
  filename: function filename() {
    if (this.state.filename) {
      return this.state.filename;
    } else if (this.props.dragAndDrop) {
      return "Select or drop a file here";
    }
  },
  fileWasSelected: function fileWasSelected(file) {
    this.setState({
      filename: file.name
    });
    return this.validate(file, (function (_this) {
      return function () {
        var base;
        if (typeof (base = _this.props).onFileSelect === "function") {
          base.onFileSelect(file);
        }
        if (_this.props.onDataChanged) {
          return _this.props.onDataChanged(_this.props.dataKey, file);
        }
      };
    })(this));
  },
  render: function render() {
    var classes, dragIcon, label;
    classes = classnames({
      "col-sm-10": true,
      fileDrop: this.props.dragAndDrop
    });
    dragIcon = React.DOM.span({
      className: classnames({
        "drag-target": true,
        dragging: this.state.dragging
      })
    }, React.createFactory(ReactBootstrap.Glyphicon)({
      glyph: "cloud-upload"
    }));
    if (this.props.displayName !== false) {
      label = React.createElement(
        "label",
        { className: "col-sm-2 control-label", htmlFor: this.props.dataKey },
        this.props.displayName
      );
    }
    return React.createElement(
      "div",
      { className: this.errorClasses("form-group") },
      label,
      React.createElement(
        "div",
        {
          className: classes,
          onDragEnter: this.onDragEnter,
          onDragOver: this.onDragOver,
          onDragLeave: this.onDragLeave,
          onDrop: this.onDrop
        },
        dragIcon,
        React.createElement(
          "div",
          { className: "fileUpload btn btn-info" },
          React.createElement(
            "span",
            null,
            "Choose File"
          ),
          React.createElement("input", {
            ref: "fileSelectInput",
            type: "file",
            className: "upload form-control",
            name: this.props.dataKey,
            onChange: this.onInputChange,
            data: this.filename(),
            disabled: this.disabled(),
            title: this.props.title
          })
        ),
        React.createElement(
          "span",
          { className: "relative" },
          this.filename()
        ),
        this.errorSpan(),
        this.helpSpan()
      )
    );
  }
});

module.exports = FileSelect;