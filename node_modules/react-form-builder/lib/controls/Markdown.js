"use strict";

var DataTypeConversionMixin, DisableOnSubmitMixin, FormMarkdownField, HelpButton, HelpMixin, Markdown, React, SingleInputMixin, StandardErrorDisplayMixin, UploadImageButton, ValidationMixin;

React = require("react");

SingleInputMixin = require("./mixins/SingleInput");

ValidationMixin = require("./mixins/Validation");

StandardErrorDisplayMixin = require("./mixins/StandardErrorDisplay");

DisableOnSubmitMixin = require("./mixins/DisableOnSubmit");

HelpMixin = require("./mixins/Help");

DataTypeConversionMixin = require("./mixins/DataTypeConversion");

Markdown = require("../utils/markdown");

HelpButton = require("./Markdown/HelpButton");

UploadImageButton = require("./Markdown/UploadImageButton");

FormMarkdownField = React.createClass({
  displayName: "FormMarkdownField",

  mixins: [SingleInputMixin, ValidationMixin, StandardErrorDisplayMixin, DisableOnSubmitMixin, HelpMixin, DataTypeConversionMixin],
  propTypes: {
    fileDestinationService: React.PropTypes.string.isRequired
  },
  onChange: function onChange(event) {
    var value;
    value = event.target.value;
    return this.validate(value, (function (_this) {
      return function () {
        return _this.props.onDataChanged(_this.props.dataKey, _this.convertDataType(value));
      };
    })(this));
  },
  componentDidUpdate: function componentDidUpdate() {
    return this.setTextAreaHeight();
  },
  componentDidMount: function componentDidMount() {
    return this.setTextAreaHeight();
  },
  setTextAreaHeight: function setTextAreaHeight() {
    var node;
    if (this.refs.textarea) {
      node = this.refs.textarea;
      return node.style.height = node.scrollHeight + "px";
    }
  },
  appendMarkdown: function appendMarkdown(markdown) {
    var ref, value;
    value = ((ref = this.props.data) != null ? ref : "") + "\n\n" + markdown + "\n\n";
    this.props.onDataChanged(this.props.dataKey, value);
    if (this.refs.textarea) {
      return this.refs.textarea.focus();
    }
  },
  renderUploadImageButton: function renderUploadImageButton() {
    if (this.props.fileDestinationService != null) {
      return React.createElement(UploadImageButton, {
        fileDestinationService: this.props.fileDestinationService,
        addImageMarkdown: this.appendMarkdown
      });
    }
  },
  render: function render() {
    var label, size;
    if (this.props.displayName !== false) {
      label = React.createElement(
        "label",
        { className: "col-sm-2 control-label", htmlFor: this.props.dataKey },
        this.props.displayName
      );
    }
    size = this.props.displayName === false ? "col-sm-12" : "col-sm-10";
    return React.createElement(
      "div",
      { className: this.errorClasses("form-group") },
      label,
      React.createElement(
        "div",
        { className: size },
        React.createElement(
          "div",
          { className: "row row-no-padding" },
          React.createElement(
            "div",
            { className: "markdown-group" },
            React.createElement(
              "div",
              { className: "col-sm-6" },
              React.createElement(
                "div",
                { className: "markdown-field-group" },
                React.createElement("textarea", {
                  ref: "textarea",
                  className: "form-control markdown-field",
                  name: this.props.dataKey,
                  value: this.props.data,
                  onChange: this.onChange,
                  disabled: this.disabled(),
                  placeholder: this.props.placeholder,
                  title: this.props.title
                }),
                React.createElement(
                  "div",
                  { className: "buttons" },
                  this.renderUploadImageButton(),
                  React.createElement(HelpButton, null)
                )
              )
            ),
            React.createElement(
              "div",
              { className: "col-sm-6" },
              React.createElement(Markdown, { value: this.props.data || "*Preview...*", className: "markdown-preview" })
            )
          )
        ),
        React.createElement(
          "div",
          { className: "row" },
          React.createElement(
            "div",
            { className: "col-sm-12" },
            this.errorSpan(),
            this.helpSpan()
          )
        )
      )
    );
  }
});

module.exports = FormMarkdownField;