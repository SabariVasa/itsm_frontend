"use strict";

var AbstractValidator,
    NumericValidator,
    extend = function extend(child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = ({}).hasOwnProperty;

AbstractValidator = require("./Abstract");

module.exports = NumericValidator = (function (superClass) {
  extend(NumericValidator, superClass);

  function NumericValidator() {
    return NumericValidator.__super__.constructor.apply(this, arguments);
  }

  NumericValidator.prototype.validate = function (value, name) {
    var errors;
    errors = [];
    if (isNaN(value)) {
      errors.push(name + " must be numeric.");
    }
    if (this.options.max != null && this.options.max < value) {
      errors.push(name + " cannot be more than " + this.options.max + ".");
    }
    if (this.options.min != null && this.options.min > value) {
      errors.push(name + " must be more than " + this.options.min + ".");
    }
    if (errors.length > 0) {
      return errors;
    } else {
      return null;
    }
  };

  return NumericValidator;
})(AbstractValidator);