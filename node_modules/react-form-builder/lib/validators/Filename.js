"use strict";

var AbstractValidator,
    FilenameValidator,
    any,
    isArray,
    toSentenceSerial,
    extend = function extend(child, parent) {
  for (var key in parent) {
    if (hasProp.call(parent, key)) child[key] = parent[key];
  }function ctor() {
    this.constructor = child;
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
},
    hasProp = ({}).hasOwnProperty;

AbstractValidator = require("./Abstract");

isArray = require("lodash/isArray");

any = require("lodash/some");

toSentenceSerial = require("underscore.string/toSentenceSerial");

module.exports = FilenameValidator = (function (superClass) {
  extend(FilenameValidator, superClass);

  function FilenameValidator() {
    return FilenameValidator.__super__.constructor.apply(this, arguments);
  }

  FilenameValidator.prototype.validate = function (file, name) {
    var errors, list, suffix, suffixes;
    errors = [];
    name || (name = "File");
    if (suffix = this.options.suffix) {
      suffixes = isArray(suffix) ? suffix : [suffix];
      list = suffixes.length > 1 ? toSentenceSerial(suffixes, ", ", " or ") : suffixes;
      if (!any(suffixes, function (suffix) {
        return file.name.match(new RegExp(suffix + "$", "i"));
      })) {
        errors.push(name + " must be a " + list + " file.");
      }
    }
    if (errors.length > 0) {
      return errors;
    } else {
      return null;
    }
  };

  return FilenameValidator;
})(AbstractValidator);