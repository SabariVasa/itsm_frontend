{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Pages\\\\userManagement\\\\ActiveDirectoryUserList.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect } from \"react\";\nimport { DataGrid } from '@mui/x-data-grid';\n// import { useDemoData } from '@mui/x-data-grid-generator';\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { Button, Box, FormControlLabel } from '@mui/material';\nimport DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\nimport GlobalService from \"../../services/GlobalService\";\n// import FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport { resturls } from \"../../global/utils/apiurls\";\nimport UserDetailsAndEdit from \"./UserDetailsAndEdit\";\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ActiveDirectoryUserList(props) {\n  _s();\n  const {\n    userData\n  } = props;\n  const history = useHistory();\n  const {\n    path\n  } = useRouteMatch();\n  const [users, setUsers] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n  // const [selectedRows, setSelectedRows] = useState([]);\n  const [selectedRowIds, setSelectedRowIds] = useState([]); // Store selected IDs\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [checkboxSelection, setCheckboxSelection] = useState(true);\n  const {\n    theme\n  } = useTheme();\n  const headerData = [{\n    field: 'fullName',\n    headerName: 'Full Name',\n    width: 150\n  }, {\n    field: 'emailAddress',\n    headerName: 'Email Address',\n    width: 250\n  }, {\n    field: 'samAccountName',\n    headerName: 'sam Account Name',\n    width: 150\n  }, {\n    field: 'mobileNumber',\n    headerName: 'Mobile Number',\n    width: 200\n  }, {\n    field: 'Office',\n    headerName: 'Offic',\n    width: 150\n  }, {\n    field: 'companyName',\n    headerName: 'Company Name',\n    width: 100,\n    renderCell: params => params.value ? 'Active' : 'Inactive'\n  }, {\n    field: 'manager',\n    headerName: 'Manager',\n    width: 150\n  }, {\n    field: 'jobTitle',\n    headerName: 'Job Title',\n    width: 200\n  }, {\n    field: 'department',\n    headerName: 'Department',\n    width: 120\n  }, {\n    field: 'configId',\n    headerName: 'Config Id',\n    width: 150\n  }, {\n    field: 'description',\n    headerName: 'Description',\n    width: 150\n  }];\n  const getDynamicHeaders = userData => {\n    if (!userData || userData.length === 0) return [];\n    console.log(userData, 'users');\n    // Extract keys from the first object in userData\n    const keys = Object.keys(userData[0]);\n    const excludeFields = [\"id\", \"assignGroup\", \"category\", \"subCategory\", \"service\", \"serviceCategory\", \"configurationItem\", \"impactReason\", \"urgencyReason\", \"createdBy\", \"shortDescription\", \"description\"];\n\n    // Map keys to column definitions\n    const dynamicHeaders = keys.filter(key => !excludeFields.includes(key)).map((key, index) => {\n      // Add custom configuration for specific fields if needed\n      if (index === 0) {\n        return {\n          field: key,\n          headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\n          .replace(/[_]/g, \" \") // Replace underscores with spaces\n          .toLowerCase() // Convert all to lowercase\n          .replace(/\\b\\w/g, char => char.toUpperCase()),\n          // Capitalize first letter of each word\n          width: 200,\n          renderCell: params => /*#__PURE__*/_jsxDEV(\"span\", {\n            // onClick={() =>\n            //   navigate.push(\n            //     `${path.replace(\n            //       \"/incident-list\",\n            //       \"\"\n            //     )}/update_incident/${params.row.incidentId}`\n            //   )\n            // }\n            style: {\n              textDecoration: \"underline\",\n              color: \"#1976d2\",\n              cursor: \"pointer\"\n            },\n            children: params.value || \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        };\n      }\n      switch (key) {\n        case \"firstName\":\n          return {\n            field: key,\n            headerName: \"First Name\",\n            width: 150\n          };\n        case \"lastName\":\n          return {\n            field: key,\n            headerName: \"Last Name\",\n            width: 150\n          };\n        case \"emailAddress\":\n          return {\n            field: key,\n            headerName: \"Email\",\n            width: 250\n          };\n        case \"active\":\n          return {\n            field: key,\n            headerName: \"Status\",\n            width: 100,\n            renderCell: params => params.value ? \"Active\" : \"Inactive\"\n          };\n        default:\n          return {\n            field: key,\n            headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/([_])/g, \" \").toUpperCase(),\n            width: 150\n          };\n      }\n    });\n    return dynamicHeaders;\n  };\n  const processRowUpdate = newRow => ({\n    ...newRow,\n    isNew: false\n  });\n  const getAllUserDetails = () => {\n    // if (!userData) {\n    GlobalService.generalSelect(respdata => {\n      const {\n        data\n      } = respdata;\n      setUsers(data);\n      setHeaders(getDynamicHeaders(data));\n      setLoading(false);\n    }, `${resturls.getAllADUsers}/${'677e75d9ad7e572e204496f9'}`, {}, 'GET');\n  };\n\n  // const { data } = useDemoData({\n  //   dataSet: 'Commodity',\n  //   rowLength: 10,\n  //   maxColumns: 5,\n  // });\n\n  console.log(users, 'users');\n  useEffect(() => {\n    getAllUserDetails();\n  }, [isCreateUserOpen]);\n  const handleSelectionModelChange = newSelection => {\n    // Update selectedRowIds\n    setSelectedRowIds(newSelection);\n\n    // Map selected IDs to their corresponding rows\n    const selectedRowsData = users.filter(user => newSelection.includes(user.id));\n    setSelectedRows(selectedRowsData);\n\n    // Debugging\n    console.log(\"Selected Row IDs:\", newSelection);\n    console.log(\"Selected Row Data:\", selectedRowsData);\n  };\n\n  // Optional: Get the actual data for selected rows\n  // const selectedUserData = users.filter((user) => selectedRows.includes(user.id));\n  // const selectedRowData = rows.filter((row) => newSelection.includes(row.id));\n\n  console.log(selectedRows, 'selectedRows');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(DefaultLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isCreateUserOpen ? /*#__PURE__*/_jsxDEV(UserDetailsAndEdit, {\n        isCreateUserOpen: setIsCreateUserOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [console.log(headers, 'headers'), /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: users,\n          columns: headers,\n          getRowId: row => row.emailAddress,\n          pageSizeOptions: [5],\n          editMode: \"row\",\n          processRowUpdate: processRowUpdate,\n          checkboxSelection: !userData && checkboxSelection,\n          disableRowSelectionOnClick: true,\n          onSelectionModelChange: newSelection => handleSelectionModelChange(newSelection),\n          selectionModel: selectedRowIds,\n          initialState: {\n            pagination: {\n              paginationModel: {\n                page: 0,\n                pageSize: 20\n              }\n            }\n          },\n          sx: {\n            '& .MuiDataGrid-columnHeaders': {\n              '& .MuiDataGrid-row--borderBottom': {\n                background: `${theme.outerBodyColor}`,\n                color: `white`\n              }\n            },\n            '& .MuiDataGrid-rowHeader': {\n              background: `${theme.outerBodyColor}`,\n              color: `${theme.fontColor}`\n            },\n            '& .MuiDataGrid-row--borderBottom': {\n              borderBottom: '2px solid #cccccc'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)\n  }, void 0, false);\n}\n_s(ActiveDirectoryUserList, \"G84l7HZRCm9pH5JZ6fO9gsf2ebw=\", false, function () {\n  return [useHistory, useRouteMatch, useTheme];\n});\n_c = ActiveDirectoryUserList;\nvar _c;\n$RefreshReg$(_c, \"ActiveDirectoryUserList\");","map":{"version":3,"names":["React","useState","useEffect","DataGrid","useHistory","useRouteMatch","Button","Box","FormControlLabel","DefaultLoader","GlobalService","Switch","resturls","UserDetailsAndEdit","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","ActiveDirectoryUserList","props","_s","userData","history","path","users","setUsers","headers","setHeaders","loading","setLoading","isCreateUserOpen","setIsCreateUserOpen","selectedRowIds","setSelectedRowIds","selectedRows","setSelectedRows","checkboxSelection","setCheckboxSelection","theme","headerData","field","headerName","width","renderCell","params","value","getDynamicHeaders","length","console","log","keys","Object","excludeFields","dynamicHeaders","filter","key","includes","map","index","replace","toLowerCase","char","toUpperCase","style","textDecoration","color","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","processRowUpdate","newRow","isNew","getAllUserDetails","generalSelect","respdata","data","getAllADUsers","handleSelectionModelChange","newSelection","selectedRowsData","user","id","rows","columns","getRowId","row","emailAddress","pageSizeOptions","editMode","disableRowSelectionOnClick","onSelectionModelChange","selectionModel","initialState","pagination","paginationModel","page","pageSize","sx","background","outerBodyColor","fontColor","borderBottom","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Pages/userManagement/ActiveDirectoryUserList.js"],"sourcesContent":["import { React, useState, useEffect } from \"react\";\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n// import { useDemoData } from '@mui/x-data-grid-generator';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { Button, Box, FormControlLabel } from '@mui/material';\r\nimport DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\r\nimport GlobalService from \"../../services/GlobalService\";\r\n// import FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport { resturls } from \"../../global/utils/apiurls\";\r\nimport UserDetailsAndEdit from \"./UserDetailsAndEdit\";\r\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\r\n\r\nexport default function ActiveDirectoryUserList(props) {\r\n  const { userData } = props;\r\n  const history = useHistory();\r\n  const { path } = useRouteMatch();\r\n  const [users, setUsers] = useState([]);\r\n  const [headers, setHeaders] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\r\n  // const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selectedRowIds, setSelectedRowIds] = useState([]); // Store selected IDs\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [checkboxSelection, setCheckboxSelection] = useState(true);\r\n  const { theme } = useTheme();\r\n  const headerData = [\r\n    { field: 'fullName', headerName: 'Full Name', width: 150, },\r\n    { field: 'emailAddress', headerName: 'Email Address', width: 250 },\r\n    { field: 'samAccountName', headerName: 'sam Account Name', width: 150 },\r\n    { field: 'mobileNumber', headerName: 'Mobile Number', width: 200 },\r\n    { field: 'Office', headerName: 'Offic', width: 150 },\r\n    { field: 'companyName', headerName: 'Company Name', width: 100, renderCell: (params) => (params.value ? 'Active' : 'Inactive') },\r\n    { field: 'manager', headerName: 'Manager', width: 150 },\r\n    { field: 'jobTitle', headerName: 'Job Title', width: 200 },\r\n    { field: 'department', headerName: 'Department', width: 120 },\r\n    { field: 'configId', headerName: 'Config Id', width: 150 },\r\n    { field: 'description', headerName: 'Description', width: 150 },\r\n  ];\r\n\r\n  const getDynamicHeaders = (userData) => {\r\n    if (!userData || userData.length === 0) return [];\r\n    console.log(userData, 'users');\r\n    // Extract keys from the first object in userData\r\n    const keys = Object.keys(userData[0]);\r\n    const excludeFields = [\"id\", \"assignGroup\",\"category\",\"subCategory\",\"service\",\"serviceCategory\",\"configurationItem\",\"impactReason\",\"urgencyReason\",\"createdBy\",\"shortDescription\",\"description\"];\r\n  \r\n\r\n    // Map keys to column definitions\r\n    const dynamicHeaders = keys\r\n    .filter((key) =>!excludeFields.includes(key))\r\n    .map((key,index) => {\r\n      // Add custom configuration for specific fields if needed\r\n      if (index === 0) {\r\n        return {\r\n          field: key,\r\n          headerName: key\r\n            .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\r\n            .replace(/[_]/g, \" \") // Replace underscores with spaces\r\n            .toLowerCase() // Convert all to lowercase\r\n            .replace(/\\b\\w/g, (char) => char.toUpperCase()), // Capitalize first letter of each word\r\n          width: 200,\r\n          renderCell: (params) => (\r\n            <span\r\n              // onClick={() =>\r\n              //   navigate.push(\r\n              //     `${path.replace(\r\n              //       \"/incident-list\",\r\n              //       \"\"\r\n              //     )}/update_incident/${params.row.incidentId}`\r\n              //   )\r\n              // }\r\n              style={{\r\n                textDecoration: \"underline\",\r\n                color: \"#1976d2\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {params.value || \"N/A\"}\r\n            </span>\r\n          ),\r\n        };\r\n      }\r\n      switch (key) {\r\n        case \"firstName\":\r\n          return {\r\n            field: key,\r\n            headerName: \"First Name\",\r\n            width: 150,\r\n          };\r\n        case \"lastName\":\r\n          return {\r\n            field: key,\r\n            headerName: \"Last Name\",\r\n            width: 150,\r\n          };\r\n        case \"emailAddress\":\r\n          return {\r\n            field: key,\r\n            headerName: \"Email\",\r\n            width: 250,\r\n          };\r\n        case \"active\":\r\n          return {\r\n            field: key,\r\n            headerName: \"Status\",\r\n            width: 100,\r\n            renderCell: (params) => (params.value ? \"Active\" : \"Inactive\"),\r\n          };\r\n        default:\r\n          return {\r\n            field: key,\r\n            headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\").replace(/([_])/g, \" \").toUpperCase(),\r\n            width: 150,\r\n          };\r\n      }\r\n    });\r\n\r\n    return dynamicHeaders;\r\n  };\r\n\r\n  const processRowUpdate = (newRow) => ({ ...newRow, isNew: false });\r\n\r\n  const getAllUserDetails = () => {\r\n    // if (!userData) {\r\n    GlobalService.generalSelect(\r\n      (respdata) => {\r\n        const { data } = respdata\r\n        setUsers(data);\r\n        setHeaders(getDynamicHeaders(data));\r\n        setLoading(false);\r\n      },\r\n      `${resturls.getAllADUsers}/${'677e75d9ad7e572e204496f9'}`,\r\n      {\r\n      },\r\n      'GET'\r\n    );\r\n  };\r\n\r\n  // const { data } = useDemoData({\r\n  //   dataSet: 'Commodity',\r\n  //   rowLength: 10,\r\n  //   maxColumns: 5,\r\n  // });\r\n\r\n  console.log(users, 'users');\r\n\r\n  useEffect(() => {\r\n    getAllUserDetails();\r\n  }, [isCreateUserOpen]);\r\n\r\n  const handleSelectionModelChange = (newSelection) => {\r\n    // Update selectedRowIds\r\n    setSelectedRowIds(newSelection);\r\n\r\n    // Map selected IDs to their corresponding rows\r\n    const selectedRowsData = users.filter((user) => newSelection.includes(user.id));\r\n    setSelectedRows(selectedRowsData);\r\n\r\n    // Debugging\r\n    console.log(\"Selected Row IDs:\", newSelection);\r\n    console.log(\"Selected Row Data:\", selectedRowsData);\r\n  };\r\n\r\n  // Optional: Get the actual data for selected rows\r\n  // const selectedUserData = users.filter((user) => selectedRows.includes(user.id));\r\n  // const selectedRowData = rows.filter((row) => newSelection.includes(row.id));\r\n\r\n\r\n  console.log(selectedRows, 'selectedRows');\r\n\r\n  return (\r\n    <>\r\n      {loading ? <DefaultLoader /> : (\r\n        <>\r\n          {isCreateUserOpen ? (\r\n            <UserDetailsAndEdit isCreateUserOpen={setIsCreateUserOpen} />\r\n          ) : (\r\n            <>\r\n              {/* <Box sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => history.push(`${path}/createUser`)}>\r\n                  Create User\r\n                </Button>\r\n              </Box>\r\n              <Box sx={{ mb: 1 }}>\r\n                <FormControlLabel\r\n                  label=\"checkboxSelection\"\r\n                  control={\r\n                    <Switch\r\n                      checked={checkboxSelection}\r\n                      onChange={(event) => setCheckboxSelection(event.target.checked)}\r\n                    />\r\n                  }\r\n                />\r\n              </Box> */}\r\n              {console.log(headers, 'headers')}\r\n              <DataGrid\r\n                rows={users}\r\n                columns={headers}\r\n                getRowId={(row) => row.emailAddress}\r\n                pageSizeOptions={[5]}\r\n                editMode=\"row\"\r\n                processRowUpdate={processRowUpdate}\r\n                checkboxSelection={!userData && checkboxSelection}\r\n                disableRowSelectionOnClick\r\n                onSelectionModelChange={(newSelection) => handleSelectionModelChange(newSelection)}\r\n                selectionModel={selectedRowIds}\r\n                initialState={{\r\n                  pagination: { paginationModel: { page: 0, pageSize: 20 } },\r\n                }}\r\n                sx={{\r\n                  '& .MuiDataGrid-columnHeaders': {\r\n                    '& .MuiDataGrid-row--borderBottom': {\r\n                      background: `${theme.outerBodyColor}`,\r\n                      color: `white`\r\n                    }\r\n                  },\r\n                  '& .MuiDataGrid-rowHeader': {\r\n                    background: `${theme.outerBodyColor}`,\r\n                    color: `${theme.fontColor}`\r\n                  },\r\n                  '& .MuiDataGrid-row--borderBottom': {\r\n                    borderBottom: '2px solid #cccccc',\r\n                  },\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}