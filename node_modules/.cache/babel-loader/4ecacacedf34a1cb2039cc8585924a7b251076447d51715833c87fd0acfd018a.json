{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Components\\\\Request Management\\\\CraeteCatelogueGeneratedForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { withTranslation } from \"react-i18next\";\nimport { Formik, Form, Field } from 'formik';\nimport { TextField, MenuItem, Button, FormControl, InputLabel, Select, Grid, IconButton, Checkbox, FormControlLabel } from '@mui/material';\nimport * as Yup from 'yup';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\nimport GeneratedForm from \"../cmdb/classmanagement/GeneratedForm\";\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ContentDevider from \"../HelperComponents/ContentDevider\";\nimport { sharedStyles } from \"../../commonComponents/StyledComponents\";\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CraeteCatelogueGeneratedForm(props) {\n  _s();\n  const {\n    formFields,\n    setFormFields,\n    selectCategoryType,\n    setCreateMainClassForm,\n    logo,\n    header\n  } = props;\n  // const [formFields, setFormFields] = useState([]);\n  const [selectOptions, setSelectOptions] = useState([]);\n  const [fileFormats, setFileFormats] = useState([]);\n  const [initialValues, setIntialValues] = useState({\n    fieldName: '',\n    fieldType: '',\n    description: '',\n    requiredField: false\n  });\n  const {\n    theme\n  } = useTheme();\n  const validationSchema = Yup.object({\n    fieldName: Yup.string().required('Field Name is required'),\n    fieldType: Yup.string().required('Field Type is required')\n    // dataType: Yup.string().required('Data Type is required'),\n  });\n  const dataTypeOptions = ['String', 'Integer', 'Boolean', 'Date', 'Upload'];\n  const fieldTypeOptions = ['Text', 'Number', 'Upload', 'Password', 'Email', 'Select', 'Date', 'Boolean'];\n  const fileFormatOptions = ['Image', 'Excel', 'PDF', 'All'];\n  const addSelectOption = () => {\n    setSelectOptions([...selectOptions, '']);\n  };\n  const removeSelectOption = index => {\n    setSelectOptions(selectOptions.filter((_, i) => i !== index));\n  };\n  const handleSelectOptionChange = (index, value) => {\n    const newOptions = [...selectOptions];\n    newOptions[index] = value;\n    setSelectOptions(newOptions);\n  };\n  // console.log(formFields, 'formFields');\n  const handleFileFormatChange = event => {\n    setFileFormats(event.target.value);\n  };\n  const handleSubmit = values => {\n    // console.log(values, fileFormats, 'values');\n    const newField = {\n      ...values\n    };\n    if (!values.fieldName || !values.fieldType) {\n      return;\n    }\n    if (values.fieldType === 'Select') {\n      newField.optionList = selectOptions;\n    }\n    if (values.fieldType === 'Upload') {\n      newField.fileFormats = fileFormats;\n    }\n    setFormFields([...formFields, newField]);\n    setSelectOptions([]);\n    setFileFormats([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: '1px solid gray',\n      padding: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validationSchema,\n      onSubmit: handleSubmit,\n      children: ({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        setFieldValue,\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField\n            // as={TextField}\n            , {\n              label: \"Field Name\",\n              name: \"fieldName\",\n              fullWidth: true,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.fieldName,\n              helperText: touched.fieldName && errors.fieldName,\n              error: touched.fieldName && Boolean(errors.fieldName),\n              sx: sharedStyles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              children: /*#__PURE__*/_jsxDEV(TextField, {\n                labelId: \"field-type-label\",\n                label: \"Field Type\",\n                select: true,\n                name: \"fieldType\",\n                value: values.fieldType,\n                onChange: handleChange,\n                onBlur: handleBlur,\n                error: touched.fieldType && Boolean(errors.fieldType),\n                sx: sharedStyles,\n                helperText: touched.fieldName && errors.fieldName,\n                children: fieldTypeOptions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: option,\n                  children: option\n                }, option, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(TextField\n            // as={TextField}\n            , {\n              label: \"Description\",\n              name: \"description\",\n              fullWidth: true,\n              onChange: handleChange,\n              onBlur: handleBlur,\n              value: values.description,\n              helperText: touched.description && errors.description,\n              error: touched.description && Boolean(errors.description),\n              sx: sharedStyles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 4,\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              component: \"fieldset\",\n              fullWidth: true,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: 'flex',\n                  flexDirection: 'column',\n                  gap: '10px',\n                  // border: \"2px solid\",\n                  // borderImageSlice: 1,\n                  // borderImageSource: \"linear-gradient(45deg, #ff7eb3, #e81885)\", // Pink gradient border\n                  borderRadius: \"1em\",\n                  // Rounded corners\n                  padding: \"10px\"\n                },\n                children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                    name: \"requiredField\",\n                    checked: values.requiredField // Bind to the `requiredField` value\n                    ,\n                    onChange: event => setFieldValue(\"requiredField\", event.target.checked) // Update Formik value\n                    ,\n                    sx: {\n                      color: `${theme.valueFontColor}`,\n                      \"&.Mui-checked\": {\n                        color: `${theme.valueFontColor}` // Active checkbox color\n                      }\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 160,\n                    columnNumber: 25\n                  }, this),\n                  label: \"Required Field\",\n                  sx: {\n                    color: `${theme.valueFontColor}` // Pink text color\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), values.fieldType === 'Select' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Add Options for Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this), selectOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              marginBottom: '10px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: `Option ${index + 1}`,\n              value: option,\n              onChange: e => handleSelectOptionChange(index, e.target.value),\n              fullWidth: true,\n              sx: sharedStyles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => removeSelectOption(index),\n              color: \"secondary\",\n              children: /*#__PURE__*/_jsxDEV(RemoveCircleIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              background: `${theme.outerBodyColor}`,\n              color: `${theme.outerBodyfontColor}`,\n              \"&:hover\": {\n                backgroundColor: `${theme.btnHoverColor}`\n              }\n            },\n            onClick: addSelectOption,\n            startIcon: /*#__PURE__*/_jsxDEV(AddCircleIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 57\n            }, this),\n            children: \"Add Option\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this), values.fieldType === 'Upload' && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Select File Formats\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"file-format-label\",\n              children: \"File Formats\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              labelId: \"file-format-label\",\n              multiple: true,\n              value: fileFormats,\n              onChange: handleFileFormatChange,\n              sx: sharedStyles,\n              children: fileFormatOptions.map(format => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: format,\n                children: format\n              }, format, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button\n          // type=\"submit\"\n          , {\n            variant: \"contained\"\n            // color=\"primary\"\n            ,\n            sx: {\n              background: `${theme.outerBodyColor}`,\n              color: `${theme.outerBodyfontColor}`,\n              \"&:hover\": {\n                backgroundColor: `${theme.btnHoverColor}`\n              }\n            },\n            onClick: () => handleSubmit(values)\n            // disabled={isSubmitting}\n            ,\n            children: \"Add Field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), formFields.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ContentDevider, {\n        title: \"Preview Generated Custom Form Fields\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeneratedForm, {\n        formFields: formFields,\n        setFormFields: setFormFields,\n        selectCategoryType: selectCategoryType,\n        logo: logo,\n        className: header,\n        generatedForm: false\n        // catelogue={true}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(CraeteCatelogueGeneratedForm, \"e78nC1xdA7dRktqovOykloyYE/M=\", false, function () {\n  return [useTheme];\n});\n_c = CraeteCatelogueGeneratedForm;\nexport default withTranslation('common')(CraeteCatelogueGeneratedForm);\nvar _c;\n$RefreshReg$(_c, \"CraeteCatelogueGeneratedForm\");","map":{"version":3,"names":["React","useState","withTranslation","Formik","Form","Field","TextField","MenuItem","Button","FormControl","InputLabel","Select","Grid","IconButton","Checkbox","FormControlLabel","Yup","AddCircleIcon","RemoveCircleIcon","GeneratedForm","ArrowBackIcon","ContentDevider","sharedStyles","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","CraeteCatelogueGeneratedForm","props","_s","formFields","setFormFields","selectCategoryType","setCreateMainClassForm","logo","header","selectOptions","setSelectOptions","fileFormats","setFileFormats","initialValues","setIntialValues","fieldName","fieldType","description","requiredField","theme","validationSchema","object","string","required","dataTypeOptions","fieldTypeOptions","fileFormatOptions","addSelectOption","removeSelectOption","index","filter","_","i","handleSelectOptionChange","value","newOptions","handleFileFormatChange","event","target","handleSubmit","values","newField","optionList","style","border","padding","children","onSubmit","errors","touched","handleChange","handleBlur","setFieldValue","isSubmitting","container","spacing","item","xs","label","name","fullWidth","onChange","onBlur","helperText","error","Boolean","sx","fileName","_jsxFileName","lineNumber","columnNumber","labelId","select","map","option","component","display","flexDirection","gap","borderRadius","control","checked","color","valueFontColor","alignItems","marginBottom","e","onClick","background","outerBodyColor","outerBodyfontColor","backgroundColor","btnHoverColor","startIcon","id","multiple","format","marginTop","variant","length","title","className","generatedForm","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Components/Request Management/CraeteCatelogueGeneratedForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { TextField, MenuItem, Button, FormControl, InputLabel, Select, Grid, IconButton, Checkbox, FormControlLabel } from '@mui/material';\r\nimport * as Yup from 'yup';\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\r\nimport GeneratedForm from \"../cmdb/classmanagement/GeneratedForm\";\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport ContentDevider from \"../HelperComponents/ContentDevider\";\r\nimport { sharedStyles } from \"../../commonComponents/StyledComponents\";\r\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\r\n\r\nfunction CraeteCatelogueGeneratedForm(props) {\r\n  const { formFields, setFormFields, selectCategoryType, setCreateMainClassForm, logo, header } = props;\r\n  // const [formFields, setFormFields] = useState([]);\r\n  const [selectOptions, setSelectOptions] = useState([]);\r\n  const [fileFormats, setFileFormats] = useState([]);\r\n  const [initialValues, setIntialValues] = useState({\r\n    fieldName: '',\r\n    fieldType: '',\r\n    description: '',\r\n    requiredField: false,\r\n  });\r\n  const { theme } = useTheme();\r\n\r\n  const validationSchema = Yup.object({\r\n    fieldName: Yup.string().required('Field Name is required'),\r\n    fieldType: Yup.string().required('Field Type is required'),\r\n    // dataType: Yup.string().required('Data Type is required'),\r\n  });\r\n\r\n  const dataTypeOptions = ['String', 'Integer', 'Boolean', 'Date', 'Upload'];\r\n  const fieldTypeOptions = ['Text', 'Number', 'Upload', 'Password', 'Email', 'Select', 'Date', 'Boolean'];\r\n\r\n  const fileFormatOptions = ['Image', 'Excel', 'PDF', 'All'];\r\n  const addSelectOption = () => {\r\n    setSelectOptions([...selectOptions, '']);\r\n  };\r\n\r\n  const removeSelectOption = (index) => {\r\n    setSelectOptions(selectOptions.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleSelectOptionChange = (index, value) => {\r\n    const newOptions = [...selectOptions];\r\n    newOptions[index] = value;\r\n    setSelectOptions(newOptions);\r\n  };\r\n  // console.log(formFields, 'formFields');\r\n  const handleFileFormatChange = (event) => {\r\n    setFileFormats(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    // console.log(values, fileFormats, 'values');\r\n    const newField = { ...values };\r\n\r\n    if(!values.fieldName || !values.fieldType){\r\n      return;\r\n    }\r\n\r\n    if (values.fieldType === 'Select') {\r\n      newField.optionList = selectOptions;\r\n    }\r\n\r\n    if (values.fieldType === 'Upload') {\r\n      newField.fileFormats = fileFormats;\r\n    }\r\n\r\n    setFormFields([...formFields, newField]);\r\n    setSelectOptions([]);\r\n    setFileFormats([]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ border: '1px solid gray', padding: '1rem' }}>\r\n      {/* <ArrowBackIcon onClick={() => setCreateMainClassForm(false)} /> */}\r\n      {/* <h3>{}</h3> */}\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        {({ values, errors, touched, handleChange, handleBlur, setFieldValue, isSubmitting }) => (\r\n          <Form>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  // as={TextField}\r\n                  label=\"Field Name\"\r\n                  name=\"fieldName\"\r\n                  fullWidth\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.fieldName}\r\n                  helperText={touched.fieldName && errors.fieldName}\r\n                  error={touched.fieldName && Boolean(errors.fieldName)}\r\n                  sx={sharedStyles}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <FormControl fullWidth>\r\n                  {/* <InputLabel id=\"field-type-label\">Field Type</InputLabel> */}\r\n                  <TextField\r\n                    labelId=\"field-type-label\"\r\n                    label=\"Field Type\"\r\n                    select\r\n                    name=\"fieldType\"\r\n                    value={values.fieldType}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    error={touched.fieldType && Boolean(errors.fieldType)}\r\n                    sx={sharedStyles}\r\n                    helperText={touched.fieldName && errors.fieldName}\r\n                  >\r\n                    {fieldTypeOptions.map((option) => (\r\n                      <MenuItem key={option} value={option}>\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  {/* {touched.fieldType && errors.fieldType && (\r\n                    <div style={{ color: 'red' }}>{errors.fieldType}</div>\r\n                  )} */}\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={4}>\r\n                <TextField\r\n                  // as={TextField}\r\n                  label=\"Description\"\r\n                  name=\"description\"\r\n                  fullWidth\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.description}\r\n                  helperText={touched.description && errors.description}\r\n                  error={touched.description && Boolean(errors.description)}\r\n                  sx={sharedStyles}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item xs={4}>\r\n                <FormControl component=\"fieldset\" fullWidth>\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      flexDirection: 'column',\r\n                      gap: '10px',\r\n                      // border: \"2px solid\",\r\n                      // borderImageSlice: 1,\r\n                      // borderImageSource: \"linear-gradient(45deg, #ff7eb3, #e81885)\", // Pink gradient border\r\n                      borderRadius: \"1em\", // Rounded corners\r\n                      padding: \"10px\",\r\n                    }}\r\n                  >\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          name=\"requiredField\"\r\n                          checked={values.requiredField} // Bind to the `requiredField` value\r\n                          onChange={(event) => setFieldValue(\"requiredField\", event.target.checked)} // Update Formik value\r\n                          sx={{\r\n                            color: `${theme.valueFontColor}`,\r\n                            \"&.Mui-checked\": {\r\n                              color: `${theme.valueFontColor}`, // Active checkbox color\r\n                            },\r\n                          }}\r\n                        />\r\n                      }\r\n                      label=\"Required Field\"\r\n                      sx={{\r\n                        color: `${theme.valueFontColor}`, // Pink text color\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {values.fieldType === 'Select' && (\r\n              <div>\r\n                <h4>Add Options for Select</h4>\r\n                {selectOptions.map((option, index) => (\r\n                  <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\r\n                    <TextField\r\n                      label={`Option ${index + 1}`}\r\n                      value={option}\r\n                      onChange={(e) => handleSelectOptionChange(index, e.target.value)}\r\n                      fullWidth\r\n                      sx={sharedStyles}\r\n                    />\r\n                    <IconButton onClick={() => removeSelectOption(index)} color=\"secondary\">\r\n                      <RemoveCircleIcon />\r\n                    </IconButton>\r\n                  </div>\r\n                ))}\r\n                <Button \r\n                sx={{ \r\n                  background: `${theme.outerBodyColor}`,\r\n                  color: `${theme.outerBodyfontColor}`,\r\n                  \"&:hover\": {\r\n                      backgroundColor: `${theme.btnHoverColor}`,\r\n                    },\r\n                }} onClick={addSelectOption} startIcon={<AddCircleIcon />}>\r\n                  Add Option\r\n                </Button>\r\n              </div>\r\n            )}\r\n\r\n            {values.fieldType === 'Upload' && (\r\n              <div>\r\n                <h4>Select File Formats</h4>\r\n                <FormControl>\r\n                  <InputLabel id=\"file-format-label\">File Formats</InputLabel>\r\n                  <TextField\r\n                    select\r\n                    labelId=\"file-format-label\"\r\n                    multiple\r\n                    value={fileFormats}\r\n                    onChange={handleFileFormatChange}\r\n                    sx={sharedStyles}\r\n                  >\r\n                    {fileFormatOptions.map((format) => (\r\n                      <MenuItem key={format} value={format}>\r\n                        {format}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </FormControl>\r\n              </div>\r\n            )}\r\n            {/* {console.log(errors, touched, values, 'errors')} */}\r\n            <div style={{ marginTop: '20px' }}>\r\n              <Button\r\n                // type=\"submit\"\r\n                variant=\"contained\"\r\n                // color=\"primary\"\r\n                sx={{ \r\n                  background: `${theme.outerBodyColor}`,\r\n                  color: `${theme.outerBodyfontColor}`,\r\n                  \"&:hover\": {\r\n                      backgroundColor: `${theme.btnHoverColor}`,\r\n                    },\r\n                }}\r\n                onClick={() => handleSubmit(values)}\r\n              // disabled={isSubmitting}\r\n              >\r\n                Add Field\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {formFields.length > 0 && (\r\n        <>\r\n          <ContentDevider title=\"Preview Generated Custom Form Fields\" />\r\n          <GeneratedForm\r\n            formFields={formFields}\r\n            setFormFields={setFormFields}\r\n            selectCategoryType={selectCategoryType}\r\n            logo={logo}\r\n            className={header}\r\n            generatedForm={false}\r\n          // catelogue={true}\r\n          />\r\n        </>)}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withTranslation('common')(CraeteCatelogueGeneratedForm);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}