{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Components\\\\groupCreation\\\\ShowSingleGroupDetailsAndEdit.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// // import ContentDevider from \"../HelperComponents/ContentDevider\";\n// // import { resturls } from \"../../global/utils/apiurls\";\n// // import GlobalService from \"../../services/GlobalService\";\n// // import { Card, CardContent, Typography, Divider, List, ListItem, ListItemText, Grid } from '@mui/material';\n\n// // function ShowSingleGroupDetailsAndEdit(props) {\n// //   const { match: { params: { show_group } } } = props;\n\n// //   const [group, setGroup] = useState({});\n\n// //   const getAllGroupDetails = () => {\n// //     // setLoading(true);\n// //     GlobalService.generalSelect(\n// //       (respdata) => {\n// //         const { estatus, emessage, data } = respdata;\n// //         if (estatus && emessage) {\n// //           const findById = (data, show_group) => data.find(item => item.id === show_group);\n// //           const foundObject = findById(data, show_group);\n// //           setGroup(foundObject);\n// //           //   setTimeout(() => {\n// //           //     setLoading(false);\n// //           //   }, 2000);\n// //         }\n// //       },\n// //       resturls.getAllGroupDetails,\n// //       {},\n// //       'GET'\n// //     );\n// //   };\n\n// //   useEffect(() => {\n// //     getAllGroupDetails();\n// //   }, []);\n\n// //   console.log(group, show_group, 'group');\n\n// //   return (\n// //     <>\n// //       <ContentDevider title=\"Group Info\" />\n// //       {group && (\n// //         <Card variant=\"outlined\">\n// //           <CardContent>\n// //             <Typography variant=\"h5\" gutterBottom>\n// //               {group?.groupName}\n// //             </Typography>\n// //             <Divider />\n\n// //             <Grid container spacing={2} marginTop={2}>\n// //               <Grid item xs={6}>\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //                   Group? Type:\n// //                 </Typography>\n// //                 <Typography variant=\"body1\">{group?.groupType}</Typography>\n// //               </Grid>\n// //               <Grid item xs={6}>\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //                   Scope:\n// //                 </Typography>\n// //                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\n// //               </Grid>\n// //               <Grid item xs={6}>\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //                   Active Status:\n// //                 </Typography>\n// //                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\n// //               </Grid>\n// //               <Grid item xs={6}>\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //                   Permission:\n// //                 </Typography>\n// //                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\n// //               </Grid>\n// //             </Grid>\n\n// //             <Divider sx={{ my: 2 }} />\n\n// //             <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //               Group? Description:\n// //             </Typography>\n// //             <Typography variant=\"body1\" gutterBottom>\n// //               {group?.groupDescription}\n// //             </Typography>\n\n// //             <Typography variant=\"subtitle1\" color=\"textSecondary\">\n// //               Group? Manager:\n// //             </Typography>\n// //             <Typography variant=\"body1\" gutterBottom>\n// //               {group?.groupManager}\n// //             </Typography>\n\n// //             <Divider sx={{ my: 2 }} />\n\n// //             <Typography variant=\"h6\" gutterBottom>\n// //               Group Members\n// //             </Typography>\n// //             <List>\n// //               {group?.groupMembers.map((member, index) => (\n// //                 <ListItem key={index} sx={{ pl: 0 }}>\n// //                   <ListItemText\n// //                     primary={`${member.firstName} ${member.lastName}`}\n// //                     secondary={`ID: ${member.id}`}\n// //                   />\n// //                 </ListItem>\n// //               ))}\n// //             </List>\n// //           </CardContent>\n// //         </Card>\n// //       )}\n// //     </>\n// //   );\n// // }\n// // export default ShowSingleGroupDetailsAndEdit;\n// import React, { useEffect, useState } from \"react\";\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\n// import { resturls } from \"../../global/utils/apiurls\";\n// import GlobalService from \"../../services/GlobalService\";\n// import {\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\n// } from '@mui/material';\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\n// import { Formik, Field, Form } from 'formik';\n\n// function ShowSingleGroupDetailsAndEdit(props) {\n//   const { match: { params: { show_group } } } = props;\n//   const [group, setGroup] = useState({});\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\n\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\n//   const handleCancelEdit = () => setEditingMemberId(null);\n//   const handleRemoveMember = (memberId) => {\n//     setGroup(prevGroup => ({\n//       ...prevGroup,\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\n//     }));\n//   };\n\n//   // const getAllGroupDetails = () => {\n//   //   GlobalService.generalSelect(\n//   //     (respdata) => {\n//   //       const { estatus, emessage, data } = respdata;\n//   //       if (estatus && emessage) {\n//   //         // const foundObject = data.find(item => item.id === show_group);\n//   //         // setGroup(foundObject);\n//   //         const findById = (data, show_group) => data.find(item => item.id === show_group);\n//   //         const foundObject = findById(data, show_group);\n//   //         setGroup(foundObject);\n//   //       }\n//   //     },\n//   //     resturls.getAllGroupDetails,\n//   //     {},\n//   //     'GET'\n//   //   );\n//   // };\n\n//   useEffect(() => {\n//     // getAllGroupDetails();\n//     GlobalService.generalSelect(\n//       (respdata) => {\n//         const { estatus, emessage, data } = respdata;\n//         if (estatus && emessage) {\n//           // const foundObject = data.find(item => item.id === show_group);\n//           // setGroup(foundObject);\n//           const findById = (data, show_group) => data.find(item => item.id === show_group);\n//           const foundObject = findById(data, show_group);\n//           setGroup(foundObject);\n//         }\n//       },\n//       resturls.getAllGroupDetails,\n//       {},\n//       'GET'\n//     );\n//   }, [show_group]);\n\n//   return (\n//     <>\n//       <ContentDevider title=\"Group Info\" />\n//       {group ? (\n//         <Card variant=\"outlined\">\n//           <CardContent>\n//             <Typography variant=\"h5\" gutterBottom>{group?.groupName}</Typography>\n//             <Divider />\n\n//             {/* Group Details */}\n//             <Grid container spacing={2} marginTop={2}>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Group Type:</Typography>\n//                 <Typography variant=\"body1\">{group?.groupType}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Scope:</Typography>\n//                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Active Status:</Typography>\n//                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Permission:</Typography>\n//                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\n//               </Grid>\n//             </Grid>\n\n//             <Divider sx={{ my: 2 }} />\n\n//             {/* Group Members Table */}\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\n//             <TableContainer component={Paper}>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>First Name</TableCell>\n//                     <TableCell>Last Name</TableCell>\n//                     <TableCell>ID</TableCell>\n//                     <TableCell align=\"right\">Actions</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {group?.groupMembers.map((member) => (\n//                     <Formik\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\n//                       onSubmit={(values) => {\n//                         setGroup(prevGroup => ({\n//                           ...prevGroup,\n//                           groupMembers: prevGroup.groupMembers.map(m =>\n//                             m.id === member.id ? { ...m, ...values } : m\n//                           ),\n//                         }));\n//                         setEditingMemberId(null);\n//                       }}\n//                       key={member.id}\n//                     >\n//                       {({ handleSubmit }) => (\n//                         <TableRow>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"firstName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.firstName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"lastName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.lastName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>{member.id}</TableCell>\n//                           <TableCell align=\"right\">\n//                             {editingMemberId === member.id ? (\n//                               <>\n//                                 <IconButton onClick={handleSubmit}>\n//                                   <Save />\n//                                 </IconButton>\n//                                 <IconButton onClick={handleCancelEdit}>\n//                                   <Cancel />\n//                                 </IconButton>\n//                               </>\n//                             ) : (\n//                               <>\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\n//                                   <Edit />\n//                                 </IconButton>\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\n//                                   <Delete />\n//                                 </IconButton>\n//                               </>\n//                             )}\n//                           </TableCell>\n//                         </TableRow>\n//                       )}\n//                     </Formik>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </CardContent>\n//         </Card>\n//       ) : ''}\n//     </>\n//   );\n// }\n\n// export default ShowSingleGroupDetailsAndEdit;\n// import React, { useEffect, useState } from \"react\";\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\n// import { resturls } from \"../../global/utils/apiurls\";\n// import GlobalService from \"../../services/GlobalService\";\n// import {\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\n// } from '@mui/material';\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\n// import { Formik, Field, Form } from 'formik';\n\n// function ShowSingleGroupDetailsAndEdit(props) {\n//   const { match: { params: { show_group } } } = props;\n//   const [group, setGroup] = useState({});\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\n\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\n//   const handleCancelEdit = () => setEditingMemberId(null);\n//   const handleRemoveMember = (memberId) => {\n//     setGroup(prevGroup => ({\n//       ...prevGroup,\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\n//     }));\n//   };\n\n//   const getAllGroupDetails = () => {\n//     GlobalService.generalSelect(\n//       (respdata) => {\n//         const { estatus, emessage, data } = respdata;\n//         if (estatus && emessage) {\n//           const foundObject = data.find(item => item.id === show_group);\n//           if (foundObject) {\n//             setGroup(foundObject);\n//           }\n//         }\n//       },\n//       resturls.getAllGroupDetails,\n//       {},\n//       'GET'\n//     );\n//   };\n\n//   useEffect(() => {\n//     getAllGroupDetails();\n//   }, [show_group]);\n\n//   return (\n//     <>\n//       <ContentDevider title=\"Group Info\" />\n//       {group && (\n//         <Card variant=\"outlined\">\n//           <CardContent>\n//             <Typography variant=\"h5\" gutterBottom>{group?.groupName}</Typography>\n//             <Divider />\n\n//             {/* Group Details */}\n//             <Grid container spacing={2} marginTop={2}>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Group Type:</Typography>\n//                 <Typography variant=\"body1\">{group?.groupType}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Scope:</Typography>\n//                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Active Status:</Typography>\n//                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\n//               </Grid>\n//               <Grid item xs={6}>\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Permission:</Typography>\n//                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\n//               </Grid>\n//             </Grid>\n\n//             <Divider sx={{ my: 2 }} />\n\n//             {/* Group Members Table */}\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\n//             <TableContainer component={Paper}>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>First Name</TableCell>\n//                     <TableCell>Last Name</TableCell>\n//                     <TableCell>ID</TableCell>\n//                     <TableCell align=\"right\">Actions</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {group?.groupMembers.map((member) => (\n//                     <Formik\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\n//                       onSubmit={(values) => {\n//                         setGroup(prevGroup => ({\n//                           ...prevGroup,\n//                           groupMembers: prevGroup.groupMembers.map(m =>\n//                             m.id === member.id ? { ...m, ...values } : m\n//                           ),\n//                         }));\n//                         setEditingMemberId(null);\n//                       }}\n//                       key={member.id}\n//                     >\n//                       {({ handleSubmit }) => (\n//                         <TableRow>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"firstName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.firstName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"lastName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.lastName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>{member.id}</TableCell>\n//                           <TableCell align=\"right\">\n//                             {editingMemberId === member.id ? (\n//                               <>\n//                                 <IconButton onClick={handleSubmit}>\n//                                   <Save />\n//                                 </IconButton>\n//                                 <IconButton onClick={handleCancelEdit}>\n//                                   <Cancel />\n//                                 </IconButton>\n//                               </>\n//                             ) : (\n//                               <>\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\n//                                   <Edit />\n//                                 </IconButton>\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\n//                                   <Delete />\n//                                 </IconButton>\n//                               </>\n//                             )}\n//                           </TableCell>\n//                         </TableRow>\n//                       )}\n//                     </Formik>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </CardContent>\n//         </Card>\n//       )}\n//     </>\n//   );\n// }\n\n// export default ShowSingleGroupDetailsAndEdit;\n// import React, { useEffect, useState } from \"react\";\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\n// import { resturls } from \"../../global/utils/apiurls\";\n// import GlobalService from \"../../services/GlobalService\";\n// import {\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\n// } from '@mui/material';\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\n// import { Formik, Field } from 'formik';\n\n// function ShowSingleGroupDetailsAndEdit(props) {\n//   const { match: { params: { show_group } } } = props;\n//   const [group, setGroup] = useState({});\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\n\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\n//   const handleCancelEdit = () => setEditingMemberId(null);\n//   const handleRemoveMember = (memberId) => {\n//     setGroup(prevGroup => ({\n//       ...prevGroup,\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\n//     }));\n//   };\n\n//   const getAllGroupDetails = () => {\n//     GlobalService.generalSelect(\n//       (respdata) => {\n//         const { estatus, emessage, data } = respdata;\n//         if (estatus && emessage) {\n//           const foundObject = data.find(item => item.id === show_group);\n//           if (foundObject) {\n//             setGroup(foundObject);\n//           }\n//         }\n//       },\n//       resturls.getAllGroupDetails,\n//       {},\n//       'GET'\n//     );\n//   };\n\n//   useEffect(() => {\n//     getAllGroupDetails();\n//   }, [show_group]);\n\n//   return (\n//     <>\n//       <ContentDevider title=\"Group Info\" />\n//       {group && (\n//         <Card variant=\"outlined\">\n//           <CardContent>\n//             <Typography variant=\"h5\" gutterBottom>{group.groupName}</Typography>\n//             <Divider />\n\n//             {/* Display Group Details Dynamically */}\n//             <Grid container spacing={2} marginTop={2}>\n//               {Object.entries(group).map(([key, value]) => (\n//                 key !== 'groupMembers' && (\n//                   <Grid item xs={6} key={key}>\n//                     <Typography variant=\"subtitle1\" color=\"textSecondary\">\n//                       {key.replace(/([A-Z])/g, ' $1')}: {/* Formats camelCase to spaced words */}\n//                     </Typography>\n//                     <Typography variant=\"body1\">\n//                       {value}\n//                     </Typography>\n//                   </Grid>\n//                 )\n//               ))}\n//             </Grid>\n\n//             <Divider sx={{ my: 2 }} />\n\n//             {/* Group Members Table */}\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\n//             <TableContainer component={Paper}>\n//               <Table>\n//                 <TableHead>\n//                   <TableRow>\n//                     <TableCell>First Name</TableCell>\n//                     <TableCell>Last Name</TableCell>\n//                     <TableCell>ID</TableCell>\n//                     <TableCell align=\"right\">Actions</TableCell>\n//                   </TableRow>\n//                 </TableHead>\n//                 <TableBody>\n//                   {group.groupMembers?.map((member) => (\n//                     <Formik\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\n//                       onSubmit={(values) => {\n//                         setGroup(prevGroup => ({\n//                           ...prevGroup,\n//                           groupMembers: prevGroup.groupMembers.map(m =>\n//                             m.id === member.id ? { ...m, ...values } : m\n//                           ),\n//                         }));\n//                         setEditingMemberId(null);\n//                       }}\n//                       key={member.id}\n//                     >\n//                       {({ handleSubmit }) => (\n//                         <TableRow>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"firstName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.firstName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>\n//                             {editingMemberId === member.id ? (\n//                               <Field\n//                                 name=\"lastName\"\n//                                 as={TextField}\n//                                 variant=\"outlined\"\n//                                 fullWidth\n//                               />\n//                             ) : (\n//                               member.lastName\n//                             )}\n//                           </TableCell>\n//                           <TableCell>{member.id}</TableCell>\n//                           <TableCell align=\"right\">\n//                             {editingMemberId === member.id ? (\n//                               <>\n//                                 <IconButton onClick={handleSubmit}>\n//                                   <Save />\n//                                 </IconButton>\n//                                 <IconButton onClick={handleCancelEdit}>\n//                                   <Cancel />\n//                                 </IconButton>\n//                               </>\n//                             ) : (\n//                               <>\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\n//                                   <Edit />\n//                                 </IconButton>\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\n//                                   <Delete />\n//                                 </IconButton>\n//                               </>\n//                             )}\n//                           </TableCell>\n//                         </TableRow>\n//                       )}\n//                     </Formik>\n//                   ))}\n//                 </TableBody>\n//               </Table>\n//             </TableContainer>\n//           </CardContent>\n//         </Card>\n//       )}\n//     </>\n//   );\n// }\n\n// export default ShowSingleGroupDetailsAndEdit;\nimport React, { useEffect, useState } from \"react\";\nimport ContentDevider from \"../HelperComponents/ContentDevider\";\nimport { resturls } from \"../../global/utils/apiurls\";\nimport GlobalService from \"../../services/GlobalService\";\nimport { Card, CardContent, Typography, Divider, Grid, IconButton, TextField, Button } from '@mui/material';\nimport { Edit, Save, Cancel } from '@mui/icons-material';\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { Formik, Field, Form } from 'formik';\n// import CreateGroupForm from \"./CreateGroupForm\";\n// import GroupManagementDetailsTable from \"./GroupManagementDetailsTable\";\n// import UserManagmentTable from \"../../Pages/userManagement/UserManagmentTable\";\nimport GroupManagementViewSettingsDetails from \"./GroupManagementViewSettingsDetails\";\nimport { GradientHeader, HeaderContainer } from \"../../commonComponents/StyledComponents\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ShowSingleGroupDetailsAndEdit(props) {\n  _s();\n  const {\n    match: {\n      params: {\n        group_id,\n        orgId\n      }\n    }\n  } = props;\n  const history = useHistory();\n  const {\n    path\n  } = useRouteMatch();\n  const [group, setGroup] = useState({});\n  const [isEditingEnable, setIsEditingEnable] = useState(false);\n  const [editDetails, setEditDetails] = useState(false);\n  const toggleEditMode = () => setIsEditingEnable(!isEditingEnable);\n  useEffect(() => {\n    GlobalService.generalSelect(respdata => {\n      const {\n        estatus,\n        emessage,\n        data\n      } = respdata;\n      if (estatus && emessage) {\n        const foundObject = data.find(item => item.id === group_id);\n        setGroup(foundObject);\n      }\n    }, resturls.getAllGroupDetails, {}, 'GET');\n  }, []);\n  const groupEditHandler = () => {\n    setEditDetails(true);\n    history.push(`/superadmin/update_dep/${group_id}/${orgId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderContainer, {\n      sx: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(GradientHeader, {\n        children: \"Group Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      variant: \"outlined\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            children: group === null || group === void 0 ? void 0 : group.groupName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => groupEditHandler(),\n            children: /*#__PURE__*/_jsxDEV(Edit, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          marginTop: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              color: \"textSecondary\",\n              children: \"Group Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              color: \"white\",\n              children: group === null || group === void 0 ? void 0 : group.groupType\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              color: \"textSecondary\",\n              children: \"Scope:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              color: \"white\",\n              children: group === null || group === void 0 ? void 0 : group.groupScope\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              color: \"textSecondary\",\n              children: \"Active Status:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              color: \"white\",\n              children: group === null || group === void 0 ? void 0 : group.activeStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              color: \"textSecondary\",\n              children: \"Permission:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              color: \"white\",\n              children: group === null || group === void 0 ? void 0 : group.userPermission\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 721,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            my: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          color: \"textSecondary\",\n          children: \"Group Description:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"white\",\n          gutterBottom: true,\n          children: group === null || group === void 0 ? void 0 : group.groupDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle1\",\n          color: \"textSecondary\",\n          children: \"Group Manager:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"white\",\n          gutterBottom: true,\n          children: group === null || group === void 0 ? void 0 : group.groupManager\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 748,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GroupManagementViewSettingsDetails, {\n      groupId: group_id,\n      org_id: orgId,\n      edit: true,\n      editDetails: editDetails,\n      userData: group && (group === null || group === void 0 ? void 0 : group.groupMembers),\n      groupAdminData: group && (group === null || group === void 0 ? void 0 : group.groupAdmins),\n      childGroups: group && (group === null || group === void 0 ? void 0 : group.childGroups)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 754,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ShowSingleGroupDetailsAndEdit, \"0T4tvp/nyjz6IgZoMFfFgwo4Fbo=\", false, function () {\n  return [useHistory, useRouteMatch];\n});\n_c = ShowSingleGroupDetailsAndEdit;\nexport default ShowSingleGroupDetailsAndEdit;\nvar _c;\n$RefreshReg$(_c, \"ShowSingleGroupDetailsAndEdit\");","map":{"version":3,"names":["React","useEffect","useState","ContentDevider","resturls","GlobalService","Card","CardContent","Typography","Divider","Grid","IconButton","TextField","Button","Edit","Save","Cancel","useHistory","useRouteMatch","Formik","Field","Form","GroupManagementViewSettingsDetails","GradientHeader","HeaderContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowSingleGroupDetailsAndEdit","props","_s","match","params","group_id","orgId","history","path","group","setGroup","isEditingEnable","setIsEditingEnable","editDetails","setEditDetails","toggleEditMode","generalSelect","respdata","estatus","emessage","data","foundObject","find","item","id","getAllGroupDetails","groupEditHandler","push","children","sx","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","variant","container","justifyContent","alignItems","gutterBottom","groupName","onClick","spacing","marginTop","xs","color","groupType","groupScope","activeStatus","userPermission","my","groupDescription","groupManager","groupId","org_id","edit","userData","groupMembers","groupAdminData","groupAdmins","childGroups","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Components/groupCreation/ShowSingleGroupDetailsAndEdit.js"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// // import ContentDevider from \"../HelperComponents/ContentDevider\";\r\n// // import { resturls } from \"../../global/utils/apiurls\";\r\n// // import GlobalService from \"../../services/GlobalService\";\r\n// // import { Card, CardContent, Typography, Divider, List, ListItem, ListItemText, Grid } from '@mui/material';\r\n\r\n// // function ShowSingleGroupDetailsAndEdit(props) {\r\n// //   const { match: { params: { show_group } } } = props;\r\n\r\n// //   const [group, setGroup] = useState({});\r\n\r\n// //   const getAllGroupDetails = () => {\r\n// //     // setLoading(true);\r\n// //     GlobalService.generalSelect(\r\n// //       (respdata) => {\r\n// //         const { estatus, emessage, data } = respdata;\r\n// //         if (estatus && emessage) {\r\n// //           const findById = (data, show_group) => data.find(item => item.id === show_group);\r\n// //           const foundObject = findById(data, show_group);\r\n// //           setGroup(foundObject);\r\n// //           //   setTimeout(() => {\r\n// //           //     setLoading(false);\r\n// //           //   }, 2000);\r\n// //         }\r\n// //       },\r\n// //       resturls.getAllGroupDetails,\r\n// //       {},\r\n// //       'GET'\r\n// //     );\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     getAllGroupDetails();\r\n// //   }, []);\r\n\r\n// //   console.log(group, show_group, 'group');\r\n\r\n// //   return (\r\n// //     <>\r\n// //       <ContentDevider title=\"Group Info\" />\r\n// //       {group && (\r\n// //         <Card variant=\"outlined\">\r\n// //           <CardContent>\r\n// //             <Typography variant=\"h5\" gutterBottom>\r\n// //               {group?.groupName}\r\n// //             </Typography>\r\n// //             <Divider />\r\n\r\n// //             <Grid container spacing={2} marginTop={2}>\r\n// //               <Grid item xs={6}>\r\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //                   Group? Type:\r\n// //                 </Typography>\r\n// //                 <Typography variant=\"body1\">{group?.groupType}</Typography>\r\n// //               </Grid>\r\n// //               <Grid item xs={6}>\r\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //                   Scope:\r\n// //                 </Typography>\r\n// //                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\r\n// //               </Grid>\r\n// //               <Grid item xs={6}>\r\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //                   Active Status:\r\n// //                 </Typography>\r\n// //                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\r\n// //               </Grid>\r\n// //               <Grid item xs={6}>\r\n// //                 <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //                   Permission:\r\n// //                 </Typography>\r\n// //                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\r\n// //               </Grid>\r\n// //             </Grid>\r\n\r\n// //             <Divider sx={{ my: 2 }} />\r\n\r\n// //             <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //               Group? Description:\r\n// //             </Typography>\r\n// //             <Typography variant=\"body1\" gutterBottom>\r\n// //               {group?.groupDescription}\r\n// //             </Typography>\r\n\r\n// //             <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n// //               Group? Manager:\r\n// //             </Typography>\r\n// //             <Typography variant=\"body1\" gutterBottom>\r\n// //               {group?.groupManager}\r\n// //             </Typography>\r\n\r\n// //             <Divider sx={{ my: 2 }} />\r\n\r\n// //             <Typography variant=\"h6\" gutterBottom>\r\n// //               Group Members\r\n// //             </Typography>\r\n// //             <List>\r\n// //               {group?.groupMembers.map((member, index) => (\r\n// //                 <ListItem key={index} sx={{ pl: 0 }}>\r\n// //                   <ListItemText\r\n// //                     primary={`${member.firstName} ${member.lastName}`}\r\n// //                     secondary={`ID: ${member.id}`}\r\n// //                   />\r\n// //                 </ListItem>\r\n// //               ))}\r\n// //             </List>\r\n// //           </CardContent>\r\n// //         </Card>\r\n// //       )}\r\n// //     </>\r\n// //   );\r\n// // }\r\n// // export default ShowSingleGroupDetailsAndEdit;\r\n// import React, { useEffect, useState } from \"react\";\r\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\r\n// import { resturls } from \"../../global/utils/apiurls\";\r\n// import GlobalService from \"../../services/GlobalService\";\r\n// import {\r\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\r\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\r\n// } from '@mui/material';\r\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\r\n// import { Formik, Field, Form } from 'formik';\r\n\r\n// function ShowSingleGroupDetailsAndEdit(props) {\r\n//   const { match: { params: { show_group } } } = props;\r\n//   const [group, setGroup] = useState({});\r\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\r\n\r\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\r\n//   const handleCancelEdit = () => setEditingMemberId(null);\r\n//   const handleRemoveMember = (memberId) => {\r\n//     setGroup(prevGroup => ({\r\n//       ...prevGroup,\r\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\r\n//     }));\r\n//   };\r\n\r\n//   // const getAllGroupDetails = () => {\r\n//   //   GlobalService.generalSelect(\r\n//   //     (respdata) => {\r\n//   //       const { estatus, emessage, data } = respdata;\r\n//   //       if (estatus && emessage) {\r\n//   //         // const foundObject = data.find(item => item.id === show_group);\r\n//   //         // setGroup(foundObject);\r\n//   //         const findById = (data, show_group) => data.find(item => item.id === show_group);\r\n//   //         const foundObject = findById(data, show_group);\r\n//   //         setGroup(foundObject);\r\n//   //       }\r\n//   //     },\r\n//   //     resturls.getAllGroupDetails,\r\n//   //     {},\r\n//   //     'GET'\r\n//   //   );\r\n//   // };\r\n\r\n//   useEffect(() => {\r\n//     // getAllGroupDetails();\r\n//     GlobalService.generalSelect(\r\n//       (respdata) => {\r\n//         const { estatus, emessage, data } = respdata;\r\n//         if (estatus && emessage) {\r\n//           // const foundObject = data.find(item => item.id === show_group);\r\n//           // setGroup(foundObject);\r\n//           const findById = (data, show_group) => data.find(item => item.id === show_group);\r\n//           const foundObject = findById(data, show_group);\r\n//           setGroup(foundObject);\r\n//         }\r\n//       },\r\n//       resturls.getAllGroupDetails,\r\n//       {},\r\n//       'GET'\r\n//     );\r\n//   }, [show_group]);\r\n\r\n//   return (\r\n//     <>\r\n//       <ContentDevider title=\"Group Info\" />\r\n//       {group ? (\r\n//         <Card variant=\"outlined\">\r\n//           <CardContent>\r\n//             <Typography variant=\"h5\" gutterBottom>{group?.groupName}</Typography>\r\n//             <Divider />\r\n\r\n//             {/* Group Details */}\r\n//             <Grid container spacing={2} marginTop={2}>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Group Type:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.groupType}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Scope:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Active Status:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Permission:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\r\n//               </Grid>\r\n//             </Grid>\r\n\r\n//             <Divider sx={{ my: 2 }} />\r\n\r\n//             {/* Group Members Table */}\r\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\r\n//             <TableContainer component={Paper}>\r\n//               <Table>\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>First Name</TableCell>\r\n//                     <TableCell>Last Name</TableCell>\r\n//                     <TableCell>ID</TableCell>\r\n//                     <TableCell align=\"right\">Actions</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {group?.groupMembers.map((member) => (\r\n//                     <Formik\r\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\r\n//                       onSubmit={(values) => {\r\n//                         setGroup(prevGroup => ({\r\n//                           ...prevGroup,\r\n//                           groupMembers: prevGroup.groupMembers.map(m =>\r\n//                             m.id === member.id ? { ...m, ...values } : m\r\n//                           ),\r\n//                         }));\r\n//                         setEditingMemberId(null);\r\n//                       }}\r\n//                       key={member.id}\r\n//                     >\r\n//                       {({ handleSubmit }) => (\r\n//                         <TableRow>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"firstName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.firstName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"lastName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.lastName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>{member.id}</TableCell>\r\n//                           <TableCell align=\"right\">\r\n//                             {editingMemberId === member.id ? (\r\n//                               <>\r\n//                                 <IconButton onClick={handleSubmit}>\r\n//                                   <Save />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={handleCancelEdit}>\r\n//                                   <Cancel />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\r\n//                                   <Edit />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\r\n//                                   <Delete />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             )}\r\n//                           </TableCell>\r\n//                         </TableRow>\r\n//                       )}\r\n//                     </Formik>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//           </CardContent>\r\n//         </Card>\r\n//       ) : ''}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ShowSingleGroupDetailsAndEdit;\r\n// import React, { useEffect, useState } from \"react\";\r\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\r\n// import { resturls } from \"../../global/utils/apiurls\";\r\n// import GlobalService from \"../../services/GlobalService\";\r\n// import {\r\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\r\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\r\n// } from '@mui/material';\r\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\r\n// import { Formik, Field, Form } from 'formik';\r\n\r\n// function ShowSingleGroupDetailsAndEdit(props) {\r\n//   const { match: { params: { show_group } } } = props;\r\n//   const [group, setGroup] = useState({});\r\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\r\n\r\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\r\n//   const handleCancelEdit = () => setEditingMemberId(null);\r\n//   const handleRemoveMember = (memberId) => {\r\n//     setGroup(prevGroup => ({\r\n//       ...prevGroup,\r\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\r\n//     }));\r\n//   };\r\n\r\n//   const getAllGroupDetails = () => {\r\n//     GlobalService.generalSelect(\r\n//       (respdata) => {\r\n//         const { estatus, emessage, data } = respdata;\r\n//         if (estatus && emessage) {\r\n//           const foundObject = data.find(item => item.id === show_group);\r\n//           if (foundObject) {\r\n//             setGroup(foundObject);\r\n//           }\r\n//         }\r\n//       },\r\n//       resturls.getAllGroupDetails,\r\n//       {},\r\n//       'GET'\r\n//     );\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getAllGroupDetails();\r\n//   }, [show_group]);\r\n\r\n//   return (\r\n//     <>\r\n//       <ContentDevider title=\"Group Info\" />\r\n//       {group && (\r\n//         <Card variant=\"outlined\">\r\n//           <CardContent>\r\n//             <Typography variant=\"h5\" gutterBottom>{group?.groupName}</Typography>\r\n//             <Divider />\r\n\r\n//             {/* Group Details */}\r\n//             <Grid container spacing={2} marginTop={2}>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Group Type:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.groupType}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Scope:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.groupScope}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Active Status:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.activeStatus}</Typography>\r\n//               </Grid>\r\n//               <Grid item xs={6}>\r\n//                 <Typography variant=\"subtitle1\" color=\"textSecondary\">Permission:</Typography>\r\n//                 <Typography variant=\"body1\">{group?.userPermission}</Typography>\r\n//               </Grid>\r\n//             </Grid>\r\n\r\n//             <Divider sx={{ my: 2 }} />\r\n\r\n//             {/* Group Members Table */}\r\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\r\n//             <TableContainer component={Paper}>\r\n//               <Table>\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>First Name</TableCell>\r\n//                     <TableCell>Last Name</TableCell>\r\n//                     <TableCell>ID</TableCell>\r\n//                     <TableCell align=\"right\">Actions</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {group?.groupMembers.map((member) => (\r\n//                     <Formik\r\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\r\n//                       onSubmit={(values) => {\r\n//                         setGroup(prevGroup => ({\r\n//                           ...prevGroup,\r\n//                           groupMembers: prevGroup.groupMembers.map(m =>\r\n//                             m.id === member.id ? { ...m, ...values } : m\r\n//                           ),\r\n//                         }));\r\n//                         setEditingMemberId(null);\r\n//                       }}\r\n//                       key={member.id}\r\n//                     >\r\n//                       {({ handleSubmit }) => (\r\n//                         <TableRow>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"firstName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.firstName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"lastName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.lastName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>{member.id}</TableCell>\r\n//                           <TableCell align=\"right\">\r\n//                             {editingMemberId === member.id ? (\r\n//                               <>\r\n//                                 <IconButton onClick={handleSubmit}>\r\n//                                   <Save />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={handleCancelEdit}>\r\n//                                   <Cancel />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\r\n//                                   <Edit />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\r\n//                                   <Delete />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             )}\r\n//                           </TableCell>\r\n//                         </TableRow>\r\n//                       )}\r\n//                     </Formik>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//           </CardContent>\r\n//         </Card>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ShowSingleGroupDetailsAndEdit;\r\n// import React, { useEffect, useState } from \"react\";\r\n// import ContentDevider from \"../HelperComponents/ContentDevider\";\r\n// import { resturls } from \"../../global/utils/apiurls\";\r\n// import GlobalService from \"../../services/GlobalService\";\r\n// import {\r\n//   Card, CardContent, Typography, Divider, Table, TableBody, TableCell,\r\n//   TableContainer, TableHead, TableRow, IconButton, TextField, Grid, Paper\r\n// } from '@mui/material';\r\n// import { Edit, Delete, Save, Cancel } from '@mui/icons-material';\r\n// import { Formik, Field } from 'formik';\r\n\r\n// function ShowSingleGroupDetailsAndEdit(props) {\r\n//   const { match: { params: { show_group } } } = props;\r\n//   const [group, setGroup] = useState({});\r\n//   const [editingMemberId, setEditingMemberId] = useState(null); // Track editing member\r\n\r\n//   const handleEditClick = (memberId) => setEditingMemberId(memberId);\r\n//   const handleCancelEdit = () => setEditingMemberId(null);\r\n//   const handleRemoveMember = (memberId) => {\r\n//     setGroup(prevGroup => ({\r\n//       ...prevGroup,\r\n//       groupMembers: prevGroup.groupMembers.filter(member => member.id !== memberId),\r\n//     }));\r\n//   };\r\n\r\n//   const getAllGroupDetails = () => {\r\n//     GlobalService.generalSelect(\r\n//       (respdata) => {\r\n//         const { estatus, emessage, data } = respdata;\r\n//         if (estatus && emessage) {\r\n//           const foundObject = data.find(item => item.id === show_group);\r\n//           if (foundObject) {\r\n//             setGroup(foundObject);\r\n//           }\r\n//         }\r\n//       },\r\n//       resturls.getAllGroupDetails,\r\n//       {},\r\n//       'GET'\r\n//     );\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getAllGroupDetails();\r\n//   }, [show_group]);\r\n\r\n//   return (\r\n//     <>\r\n//       <ContentDevider title=\"Group Info\" />\r\n//       {group && (\r\n//         <Card variant=\"outlined\">\r\n//           <CardContent>\r\n//             <Typography variant=\"h5\" gutterBottom>{group.groupName}</Typography>\r\n//             <Divider />\r\n\r\n//             {/* Display Group Details Dynamically */}\r\n//             <Grid container spacing={2} marginTop={2}>\r\n//               {Object.entries(group).map(([key, value]) => (\r\n//                 key !== 'groupMembers' && (\r\n//                   <Grid item xs={6} key={key}>\r\n//                     <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n//                       {key.replace(/([A-Z])/g, ' $1')}: {/* Formats camelCase to spaced words */}\r\n//                     </Typography>\r\n//                     <Typography variant=\"body1\">\r\n//                       {value}\r\n//                     </Typography>\r\n//                   </Grid>\r\n//                 )\r\n//               ))}\r\n//             </Grid>\r\n\r\n//             <Divider sx={{ my: 2 }} />\r\n\r\n//             {/* Group Members Table */}\r\n//             <Typography variant=\"h6\" gutterBottom>Group Members</Typography>\r\n//             <TableContainer component={Paper}>\r\n//               <Table>\r\n//                 <TableHead>\r\n//                   <TableRow>\r\n//                     <TableCell>First Name</TableCell>\r\n//                     <TableCell>Last Name</TableCell>\r\n//                     <TableCell>ID</TableCell>\r\n//                     <TableCell align=\"right\">Actions</TableCell>\r\n//                   </TableRow>\r\n//                 </TableHead>\r\n//                 <TableBody>\r\n//                   {group.groupMembers?.map((member) => (\r\n//                     <Formik\r\n//                       initialValues={{ firstName: member.firstName, lastName: member.lastName }}\r\n//                       onSubmit={(values) => {\r\n//                         setGroup(prevGroup => ({\r\n//                           ...prevGroup,\r\n//                           groupMembers: prevGroup.groupMembers.map(m =>\r\n//                             m.id === member.id ? { ...m, ...values } : m\r\n//                           ),\r\n//                         }));\r\n//                         setEditingMemberId(null);\r\n//                       }}\r\n//                       key={member.id}\r\n//                     >\r\n//                       {({ handleSubmit }) => (\r\n//                         <TableRow>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"firstName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.firstName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>\r\n//                             {editingMemberId === member.id ? (\r\n//                               <Field\r\n//                                 name=\"lastName\"\r\n//                                 as={TextField}\r\n//                                 variant=\"outlined\"\r\n//                                 fullWidth\r\n//                               />\r\n//                             ) : (\r\n//                               member.lastName\r\n//                             )}\r\n//                           </TableCell>\r\n//                           <TableCell>{member.id}</TableCell>\r\n//                           <TableCell align=\"right\">\r\n//                             {editingMemberId === member.id ? (\r\n//                               <>\r\n//                                 <IconButton onClick={handleSubmit}>\r\n//                                   <Save />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={handleCancelEdit}>\r\n//                                   <Cancel />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <IconButton onClick={() => handleEditClick(member.id)}>\r\n//                                   <Edit />\r\n//                                 </IconButton>\r\n//                                 <IconButton onClick={() => handleRemoveMember(member.id)}>\r\n//                                   <Delete />\r\n//                                 </IconButton>\r\n//                               </>\r\n//                             )}\r\n//                           </TableCell>\r\n//                         </TableRow>\r\n//                       )}\r\n//                     </Formik>\r\n//                   ))}\r\n//                 </TableBody>\r\n//               </Table>\r\n//             </TableContainer>\r\n//           </CardContent>\r\n//         </Card>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ShowSingleGroupDetailsAndEdit;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ContentDevider from \"../HelperComponents/ContentDevider\";\r\nimport { resturls } from \"../../global/utils/apiurls\";\r\nimport GlobalService from \"../../services/GlobalService\";\r\nimport {\r\n  Card, CardContent, Typography, Divider, Grid, IconButton, TextField, Button\r\n} from '@mui/material';\r\nimport { Edit, Save, Cancel } from '@mui/icons-material';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { Formik, Field, Form } from 'formik';\r\n// import CreateGroupForm from \"./CreateGroupForm\";\r\n// import GroupManagementDetailsTable from \"./GroupManagementDetailsTable\";\r\n// import UserManagmentTable from \"../../Pages/userManagement/UserManagmentTable\";\r\nimport GroupManagementViewSettingsDetails from \"./GroupManagementViewSettingsDetails\";\r\nimport { GradientHeader, HeaderContainer } from \"../../commonComponents/StyledComponents\";\r\n\r\nfunction ShowSingleGroupDetailsAndEdit(props) {\r\n  const { match: { params: { group_id, orgId } } } = props;\r\n  const history = useHistory();\r\n  const { path } = useRouteMatch();\r\n  const [group, setGroup] = useState({});\r\n  const [isEditingEnable, setIsEditingEnable] = useState(false);\r\n  const [editDetails, setEditDetails] = useState(false)\r\n\r\n  const toggleEditMode = () => setIsEditingEnable(!isEditingEnable);\r\n\r\n  useEffect(() => {\r\n    GlobalService.generalSelect(\r\n      (respdata) => {\r\n        const { estatus, emessage, data } = respdata;\r\n        if (estatus && emessage) {\r\n          const foundObject = data.find(item => item.id === group_id);\r\n          setGroup(foundObject);\r\n        }\r\n      },\r\n      resturls.getAllGroupDetails,\r\n      {},\r\n      'GET'\r\n    );\r\n  }, []);\r\n\r\n  const groupEditHandler = () => {\r\n    setEditDetails(true);\r\n    history.push(`/superadmin/update_dep/${group_id}/${orgId}`)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HeaderContainer sx={{ textAlign: \"center\" }}>\r\n        <GradientHeader>Group Info</GradientHeader>\r\n      </HeaderContainer>\r\n      <Card variant=\"outlined\">\r\n        <CardContent>\r\n          <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              {group?.groupName}\r\n            </Typography>\r\n            <IconButton onClick={() => groupEditHandler()}>\r\n              <Edit />\r\n            </IconButton>\r\n          </Grid>\r\n          <Divider />\r\n\r\n          <Grid container spacing={2} marginTop={2}>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                Group Type:\r\n              </Typography>\r\n              {\r\n                <Typography variant=\"body1\" color=\"white\">\r\n                  {group?.groupType}\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                Scope:\r\n              </Typography>\r\n              {\r\n                <Typography variant=\"body1\" color=\"white\">\r\n                  {group?.groupScope}\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                Active Status:\r\n              </Typography>\r\n              {\r\n                <Typography variant=\"body1\" color=\"white\">\r\n                  {group?.activeStatus}\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n                Permission:\r\n              </Typography>\r\n              {\r\n                <Typography variant=\"body1\" color=\"white\">\r\n                  {group?.userPermission}\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider sx={{ my: 2 }} />\r\n\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            Group Description:\r\n          </Typography>\r\n          {\r\n            <Typography variant=\"body1\" color=\"white\" gutterBottom>\r\n              {group?.groupDescription}\r\n            </Typography>\r\n          }\r\n\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            Group Manager:\r\n          </Typography>\r\n          {\r\n            <Typography variant=\"body1\" color=\"white\" gutterBottom>\r\n              {group?.groupManager}\r\n            </Typography>\r\n          }\r\n        </CardContent>\r\n      </Card>\r\n      <GroupManagementViewSettingsDetails\r\n        groupId={group_id}\r\n        org_id={orgId}\r\n        edit={true}\r\n        editDetails={editDetails}\r\n        userData={group && group?.groupMembers}\r\n        groupAdminData={group && group?.groupAdmins}\r\n        childGroups={group && group?.childGroups}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ShowSingleGroupDetailsAndEdit;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,oCAAoC;AAC/D,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,OAAOC,aAAa,MAAM,8BAA8B;AACxD,SACEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,MAAM,QACtE,eAAe;AACtB,SAASC,IAAI,EAAEC,IAAI,EAAEC,MAAM,QAAQ,qBAAqB;AACxD,SAASC,UAAU,EAAEC,aAAa,QAAQ,kBAAkB;AAC5D,SAASC,MAAM,EAAEC,KAAK,EAAEC,IAAI,QAAQ,QAAQ;AAC5C;AACA;AACA;AACA,OAAOC,kCAAkC,MAAM,sCAAsC;AACrF,SAASC,cAAc,EAAEC,eAAe,QAAQ,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1F,SAASC,6BAA6BA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC5C,MAAM;IAAEC,KAAK,EAAE;MAAEC,MAAM,EAAE;QAAEC,QAAQ;QAAEC;MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}