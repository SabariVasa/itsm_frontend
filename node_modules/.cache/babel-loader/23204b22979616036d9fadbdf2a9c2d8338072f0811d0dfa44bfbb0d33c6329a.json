{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Components\\\\groupCreation\\\\GroupManagementViewSettingsDetails.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect, useState } from \"react\";\n// // import { resturls } from \"../../global/utils/apiurls\";\n// // import GlobalService from \"../../services/GlobalService\";\n// // import {\n// //   DataGrid,\n// //   GridRowEditStopReasons,\n// // } from '@mui/x-data-grid';\n// // import { useHistory, useRouteMatch } from \"react-router-dom\";\n// // import {\n// //   Table,\n// //   TableBody,\n// //   TableCell,\n// //   TableContainer,\n// //   TableHead,\n// //   TableRow,\n// //   Paper,\n// //   Button,\n// //   Box,\n// //   Skeleton,\n// // } from '@mui/material';\n// // import DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\n// // import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\n\n// // export default function UserManagmentTable(props) {\n// //   const history = useHistory();\n// //   const { path } = useRouteMatch();\n// //   const [users, setUsers] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [defaultLoader, setDefaultLoader] = useState(true);\n// //   const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n\n// //   const headerData = [\n// //     {\n// //       field: 'firstName',\n// //       headerName: 'First Name',\n// //       width: 220,\n// //       renderCell: (params) => {\n// //         return (\n// //           <div\n// //             style={{ cursor: 'pointer', color: 'blue' }}\n// //             onClick={() => history.push(`/request-service/general-service/${params.row.requestType}?update=${params.id}`)\n// //             }\n// //           >\n// //             {console.log(params)}\n// //             {params.row.firstName}\n// //           </div >\n// //         );\n// //       },\n// //     },\n// //     { field: 'lastName\t', headerName: 'Last Name', width: 250 },\n// //     { field: 'openedDate', headerName: 'Opened Date', width: 250 },\n// //     // { field: 'Catalog', headerName: 'Catalog', width: 120 },\n// //     { field: 'approvalStatus', headerName: 'Approval Status', width: 250 },\n// //     { field: 'requestType', headerName: 'Request Type', width: 250 },\n// //   ];\n\n// //   const processRowUpdate = (newItem) => {\n// //     const updatedRow = { ...newItem, isNew: false };\n// //     // props.setRequestData(requestDetails.map((item) => (item.id === newItem.id ? updatedRow : requestDetails)));\n// //     return updatedRow;\n// //   };\n\n// //   const getAllUserDetails = () => {\n// //     // setLoading(true);\n// //     setDefaultLoader(true)\n// //     GlobalService.generalSelect(\n// //       (respdata) => {\n// //         setUsers(respdata);\n// //         setDefaultLoader(false)\n// //         setTimeout(() => {\n// //           setLoading(false);\n// //         }, 2000)\n// //       },\n// //       resturls.getUserDetails,\n// //       {},\n// //       'GET'\n// //     );\n// //   };\n\n// //   useEffect(() => {\n// //     getAllUserDetails();\n// //   }, [isCreateUserOpen]);\n\n// //   const handleCreateUser = () => {\n// //     setIsCreateUserOpen(!isCreateUserOpen);\n// //   };\n\n// //   const skeletonRows = users.length;\n// //   return (\n// //     <>\n// //       {defaultLoader ? <DefaultLoader style={{\n// //         position: \"absolute\",\n// //         left: 600,\n// //         top: 600,\n// //       }} /> : (\n// //         <>\n// //           {isCreateUserOpen ? (\n// //             <UserDetailsAndEdit isCreateUserOpen={setIsCreateUserOpen} setDefaultLoader={setDefaultLoader} DefaultLoaderComp={DefaultLoader} defaultLoader={defaultLoader} />\n// //           ) : (\n// //             <>\n// //               <Box sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\n// //                 <Button variant=\"contained\" color=\"primary\" onClick={() => history.push(`${path}/createUser`)}>\n// //                   Create User\n// //                 </Button>\n// //               </Box>\n\n// //               {/* <TableContainer component={Paper}>\n// //                 <Table sx={{ minWidth: 650 }} aria-label=\"user table\">\n// //                   <TableHead>\n// //                     <TableRow sx={{ backgroundColor: '#1976d2' }}>\n// //                       <TableCell sx={{ color: 'white' }}>ID</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>First Name</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Last Name</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Email</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Company</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Department</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Manager</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Location</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Role</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Mobile Number</TableCell>\n// //                       <TableCell sx={{ color: 'white' }}>Status</TableCell>\n// //                     </TableRow>\n// //                   </TableHead>\n// //                   <TableBody>\n// //                     {loading\n// //                       ? Array.from(new Array(skeletonRows)).map((_, index) => (\n// //                         <TableRow key={index}>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                           <TableCell>\n// //                             <Skeleton variant=\"text\" />\n// //                           </TableCell>\n// //                         </TableRow>\n// //                       ))\n// //                       : users.map((user) => (\n// //                         <TableRow key={user.id} onClick={() => history.push(`${path}/userUpdate/${user.id}`)}>\n// //                           <TableCell>{user.id}</TableCell>\n// //                           <TableCell>{user.firstName}</TableCell>\n// //                           <TableCell>{user.lastName}</TableCell>\n// //                           <TableCell>{user.emailAddress}</TableCell>\n// //                           <TableCell>{user.company}</TableCell>\n// //                           <TableCell>{user.department}</TableCell>\n// //                           <TableCell>{user.manager}</TableCell>\n// //                           <TableCell>{user.userBranch}</TableCell>\n// //                           <TableCell>{user.userRole}</TableCell>\n// //                           <TableCell>{user.mobileNumber}</TableCell>\n// //                           <TableCell>{user.loggedInStatus || \"offline\"}</TableCell>\n// //                         </TableRow>\n// //                       ))}\n// //                   </TableBody>\n// //                 </Table>\n// //               </TableContainer> */}\n// //               {console.log(users, 'users')}\n// //               <DataGrid\n// //                 rows={users}\n// //                 editMode='row'\n// //                 getRowId={(row) => row.id}\n// //                 columns={headerData}\n// //                 // isRowSelected: (id: GridRowId) => boolean\n// //                 processRowUpdate={processRowUpdate}\n// //                 initialState={{\n// //                   pagination: {\n// //                     paginationModel: { page: 0, pageSize: 10 },\n// //                   },\n// //                 }}\n// //                 sx={{\n// //                   '& .MuiDataGrid-columnHeaders': {\n// //                     backgroundColor: '#e600e6 !important',\n// //                   },\n// //                   '& .MuiDataGrid-columnHeader': {\n// //                     backgroundColor: '#bfbfbf',\n// //                     color: \"white\"\n// //                   },\n// //                 }}\n// //                 pageSizeOptions={[10]}\n// //               // checkboxSelection={true}\n// //               // onCellClick={handleCellClick}\n// //               />\n// //             </>\n// //           )}\n// //         </>\n// //       )}\n// //     </>\n// //   );\n// // }\n// import React, { useEffect, useState } from \"react\";\n// import { DataGrid, renderActionsCell } from '@mui/x-data-grid';\n// import { useHistory, useRouteMatch } from \"react-router-dom\";\n// import { Button, Box } from '@mui/material';\n// import DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\n// import GlobalService from \"../../services/GlobalService\";\n// import { resturls } from \"../../global/utils/apiurls\";\n// import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\n\n// export default function UserManagmentTable() {\n//   const history = useHistory();\n//   const { path } = useRouteMatch();\n//   const [users, setUsers] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n\n//   const headerData = [\n//     {\n//       field: 'firstName', headerName: 'First Name', width: 150,\n//       renderCell: (params) => {\n//         return (\n//           <div\n//             style={{ cursor: 'pointer', color: 'blue' }}\n//             onClick={() => history.push(`${path}/userUpdate/${params.row.id}`)\n//             }\n//           >\n//             {params.row.firstName}\n//           </div >\n//         );\n//       },\n//     },\n//     { field: 'lastName', headerName: 'Last Name', width: 150 },\n//     { field: 'emailAddress', headerName: 'Email', width: 250 },\n//     { field: 'company', headerName: 'Company', width: 200 },\n//     { field: 'department', headerName: 'Department', width: 200 },\n//     { field: 'manager', headerName: 'Manager', width: 150 },\n//     { field: 'userBranch', headerName: 'Location', width: 150 },\n//     { field: 'userRole', headerName: 'Role', width: 120 },\n//     { field: 'mobileNumber', headerName: 'Mobile Number', width: 150 },\n//     { field: 'active', headerName: 'Status', width: 100, renderCell: (params) => (params.value ? 'Active' : 'Inactive') },\n//   ];\n\n//   const processRowUpdate = (newRow) => ({ ...newRow, isNew: false });\n\n//   const getAllUserDetails = () => {\n//     GlobalService.generalSelect(\n//       (respdata) => {\n//         setUsers(respdata);\n//         setLoading(false);\n//       },\n//       resturls.getUserDetails,\n//       {},\n//       'GET'\n//     );\n//   };\n\n//   useEffect(() => {\n//     getAllUserDetails();\n//   }, [isCreateUserOpen]);\n\n//   return (\n//     <>\n//       {loading ? <DefaultLoader /> : (\n//         <>\n//           {isCreateUserOpen ? (\n//             <UserDetailsAndEdit isCreateUserOpen={setIsCreateUserOpen} />\n//           ) : (\n//             <>\n//               <Box sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\n//                 <Button variant=\"contained\" color=\"primary\" onClick={() => history.push(`${path}/createUser`)}>\n//                   Create User\n//                 </Button>\n//               </Box>\n\n//               <DataGrid\n//                 rows={users}\n//                 columns={headerData}\n//                 getRowId={(row) => row.id}\n//                 pageSizeOptions={[10]}\n//                 editMode=\"row\"\n//                 processRowUpdate={processRowUpdate}\n//                 checkboxSelection={true}\n//                 initialState={{\n//                   pagination: { paginationModel: { page: 0, pageSize: 10 } },\n//                 }}\n//                 sx={{\n//                   '& .MuiDataGrid-columnHeaders': {\n//                     backgroundColor: '#e600e6 !important',\n//                   },\n//                   '& .MuiDataGrid-columnHeader': {\n//                     backgroundColor: '#bfbfbf',\n//                     color: \"white\"\n//                   },\n//                 }}\n//               />\n//             </>\n//           )}\n//         </>\n//       )}\n//     </>\n//   );\n// }\n// import React, { useEffect, useState } from \"react\";\nimport { DataGrid } from '@mui/x-data-grid';\n// import { useDemoData } from '@mui/x-data-grid-generator';\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { Button, Box, FormControlLabel, Modal } from '@mui/material';\nimport DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\nimport GlobalService from \"../../services/GlobalService\";\n// import FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport { resturls } from \"../../global/utils/apiurls\";\n// import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\n// import ManagementUserList from './ManagementUserList';\n// import ActiveDirectoryUserList from './ActiveDirectoryUserList';\nimport GroupMemberList from './GroupMemberList';\nimport GroupAdminList from './GroupAdminList';\nimport CreateGroupForm from './CreateGroupForm';\nimport ChildGroupList from './ChildGroupList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GroupManagementViewSettingsDetails(props) {\n  _s();\n  const {\n    userData,\n    setSelectedUserRows,\n    isKeywordPresent,\n    editDetails,\n    edit,\n    org_id,\n    groupId,\n    groupAdminData,\n    childGroups\n  } = props;\n  // const [selectedChildGroup, setSelectedChildGroup] = React.useState({});\n  // console.log(selectedChildGroup, 'selectedChildGroup');\n  function CustomTabPanel(props) {\n    const {\n      children,\n      value,\n      index,\n      ...other\n    } = props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      role: \"tabpanel\",\n      hidden: value !== index,\n      id: `simple-tabpanel-${index}`,\n      \"aria-labelledby\": `simple-tab-${index}`,\n      ...other,\n      children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          p: 3\n        },\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this);\n  }\n  CustomTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n  };\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`\n    };\n  }\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: '100%',\n      marginTop: '2em',\n      borderRadius: '0.3em'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider'\n      },\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        value: value,\n        onChange: handleChange,\n        \"aria-label\": \"basic tabs example\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Group Members\",\n          ...a11yProps(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Group Admins\",\n          ...a11yProps(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomTabPanel, {\n      value: value,\n      index: 2,\n      children: /*#__PURE__*/_jsxDEV(ChildGroupList, {\n        edit: edit,\n        userData: childGroups,\n        setSelectedUserRows: setSelectedUserRows,\n        editDetails: editDetails,\n        isKeywordPresent: isKeywordPresent\n        // setSelectedChildGroup={setSelectedChildGroup}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n}\n_s(GroupManagementViewSettingsDetails, \"qPBOvRc2Co1iWTsdTL0g7j/rpjU=\");\n_c = GroupManagementViewSettingsDetails;\nvar _c;\n$RefreshReg$(_c, \"GroupManagementViewSettingsDetails\");","map":{"version":3,"names":["DataGrid","useHistory","useRouteMatch","Button","Box","FormControlLabel","Modal","DefaultLoader","GlobalService","Switch","resturls","React","PropTypes","Tabs","Tab","GroupMemberList","GroupAdminList","CreateGroupForm","ChildGroupList","jsxDEV","_jsxDEV","GroupManagementViewSettingsDetails","props","_s","userData","setSelectedUserRows","isKeywordPresent","editDetails","edit","org_id","groupId","groupAdminData","childGroups","CustomTabPanel","children","value","index","other","role","hidden","id","sx","p","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","node","number","isRequired","a11yProps","setValue","useState","handleChange","event","newValue","width","marginTop","borderRadius","borderBottom","borderColor","onChange","label","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Components/groupCreation/GroupManagementViewSettingsDetails.js"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\r\n// // import { resturls } from \"../../global/utils/apiurls\";\r\n// // import GlobalService from \"../../services/GlobalService\";\r\n// // import {\r\n// //   DataGrid,\r\n// //   GridRowEditStopReasons,\r\n// // } from '@mui/x-data-grid';\r\n// // import { useHistory, useRouteMatch } from \"react-router-dom\";\r\n// // import {\r\n// //   Table,\r\n// //   TableBody,\r\n// //   TableCell,\r\n// //   TableContainer,\r\n// //   TableHead,\r\n// //   TableRow,\r\n// //   Paper,\r\n// //   Button,\r\n// //   Box,\r\n// //   Skeleton,\r\n// // } from '@mui/material';\r\n// // import DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\r\n// // import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\r\n\r\n// // export default function UserManagmentTable(props) {\r\n// //   const history = useHistory();\r\n// //   const { path } = useRouteMatch();\r\n// //   const [users, setUsers] = useState([]);\r\n// //   const [loading, setLoading] = useState(true);\r\n// //   const [defaultLoader, setDefaultLoader] = useState(true);\r\n// //   const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\r\n\r\n// //   const headerData = [\r\n// //     {\r\n// //       field: 'firstName',\r\n// //       headerName: 'First Name',\r\n// //       width: 220,\r\n// //       renderCell: (params) => {\r\n// //         return (\r\n// //           <div\r\n// //             style={{ cursor: 'pointer', color: 'blue' }}\r\n// //             onClick={() => history.push(`/request-service/general-service/${params.row.requestType}?update=${params.id}`)\r\n// //             }\r\n// //           >\r\n// //             {console.log(params)}\r\n// //             {params.row.firstName}\r\n// //           </div >\r\n// //         );\r\n// //       },\r\n// //     },\r\n// //     { field: 'lastName\t', headerName: 'Last Name', width: 250 },\r\n// //     { field: 'openedDate', headerName: 'Opened Date', width: 250 },\r\n// //     // { field: 'Catalog', headerName: 'Catalog', width: 120 },\r\n// //     { field: 'approvalStatus', headerName: 'Approval Status', width: 250 },\r\n// //     { field: 'requestType', headerName: 'Request Type', width: 250 },\r\n// //   ];\r\n\r\n// //   const processRowUpdate = (newItem) => {\r\n// //     const updatedRow = { ...newItem, isNew: false };\r\n// //     // props.setRequestData(requestDetails.map((item) => (item.id === newItem.id ? updatedRow : requestDetails)));\r\n// //     return updatedRow;\r\n// //   };\r\n\r\n// //   const getAllUserDetails = () => {\r\n// //     // setLoading(true);\r\n// //     setDefaultLoader(true)\r\n// //     GlobalService.generalSelect(\r\n// //       (respdata) => {\r\n// //         setUsers(respdata);\r\n// //         setDefaultLoader(false)\r\n// //         setTimeout(() => {\r\n// //           setLoading(false);\r\n// //         }, 2000)\r\n// //       },\r\n// //       resturls.getUserDetails,\r\n// //       {},\r\n// //       'GET'\r\n// //     );\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     getAllUserDetails();\r\n// //   }, [isCreateUserOpen]);\r\n\r\n// //   const handleCreateUser = () => {\r\n// //     setIsCreateUserOpen(!isCreateUserOpen);\r\n// //   };\r\n\r\n// //   const skeletonRows = users.length;\r\n// //   return (\r\n// //     <>\r\n// //       {defaultLoader ? <DefaultLoader style={{\r\n// //         position: \"absolute\",\r\n// //         left: 600,\r\n// //         top: 600,\r\n// //       }} /> : (\r\n// //         <>\r\n// //           {isCreateUserOpen ? (\r\n// //             <UserDetailsAndEdit isCreateUserOpen={setIsCreateUserOpen} setDefaultLoader={setDefaultLoader} DefaultLoaderComp={DefaultLoader} defaultLoader={defaultLoader} />\r\n// //           ) : (\r\n// //             <>\r\n// //               <Box sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\r\n// //                 <Button variant=\"contained\" color=\"primary\" onClick={() => history.push(`${path}/createUser`)}>\r\n// //                   Create User\r\n// //                 </Button>\r\n// //               </Box>\r\n\r\n// //               {/* <TableContainer component={Paper}>\r\n// //                 <Table sx={{ minWidth: 650 }} aria-label=\"user table\">\r\n// //                   <TableHead>\r\n// //                     <TableRow sx={{ backgroundColor: '#1976d2' }}>\r\n// //                       <TableCell sx={{ color: 'white' }}>ID</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>First Name</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Last Name</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Email</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Company</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Department</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Manager</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Location</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Role</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Mobile Number</TableCell>\r\n// //                       <TableCell sx={{ color: 'white' }}>Status</TableCell>\r\n// //                     </TableRow>\r\n// //                   </TableHead>\r\n// //                   <TableBody>\r\n// //                     {loading\r\n// //                       ? Array.from(new Array(skeletonRows)).map((_, index) => (\r\n// //                         <TableRow key={index}>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                           <TableCell>\r\n// //                             <Skeleton variant=\"text\" />\r\n// //                           </TableCell>\r\n// //                         </TableRow>\r\n// //                       ))\r\n// //                       : users.map((user) => (\r\n// //                         <TableRow key={user.id} onClick={() => history.push(`${path}/userUpdate/${user.id}`)}>\r\n// //                           <TableCell>{user.id}</TableCell>\r\n// //                           <TableCell>{user.firstName}</TableCell>\r\n// //                           <TableCell>{user.lastName}</TableCell>\r\n// //                           <TableCell>{user.emailAddress}</TableCell>\r\n// //                           <TableCell>{user.company}</TableCell>\r\n// //                           <TableCell>{user.department}</TableCell>\r\n// //                           <TableCell>{user.manager}</TableCell>\r\n// //                           <TableCell>{user.userBranch}</TableCell>\r\n// //                           <TableCell>{user.userRole}</TableCell>\r\n// //                           <TableCell>{user.mobileNumber}</TableCell>\r\n// //                           <TableCell>{user.loggedInStatus || \"offline\"}</TableCell>\r\n// //                         </TableRow>\r\n// //                       ))}\r\n// //                   </TableBody>\r\n// //                 </Table>\r\n// //               </TableContainer> */}\r\n// //               {console.log(users, 'users')}\r\n// //               <DataGrid\r\n// //                 rows={users}\r\n// //                 editMode='row'\r\n// //                 getRowId={(row) => row.id}\r\n// //                 columns={headerData}\r\n// //                 // isRowSelected: (id: GridRowId) => boolean\r\n// //                 processRowUpdate={processRowUpdate}\r\n// //                 initialState={{\r\n// //                   pagination: {\r\n// //                     paginationModel: { page: 0, pageSize: 10 },\r\n// //                   },\r\n// //                 }}\r\n// //                 sx={{\r\n// //                   '& .MuiDataGrid-columnHeaders': {\r\n// //                     backgroundColor: '#e600e6 !important',\r\n// //                   },\r\n// //                   '& .MuiDataGrid-columnHeader': {\r\n// //                     backgroundColor: '#bfbfbf',\r\n// //                     color: \"white\"\r\n// //                   },\r\n// //                 }}\r\n// //                 pageSizeOptions={[10]}\r\n// //               // checkboxSelection={true}\r\n// //               // onCellClick={handleCellClick}\r\n// //               />\r\n// //             </>\r\n// //           )}\r\n// //         </>\r\n// //       )}\r\n// //     </>\r\n// //   );\r\n// // }\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { DataGrid, renderActionsCell } from '@mui/x-data-grid';\r\n// import { useHistory, useRouteMatch } from \"react-router-dom\";\r\n// import { Button, Box } from '@mui/material';\r\n// import DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\r\n// import GlobalService from \"../../services/GlobalService\";\r\n// import { resturls } from \"../../global/utils/apiurls\";\r\n// import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\r\n\r\n// export default function UserManagmentTable() {\r\n//   const history = useHistory();\r\n//   const { path } = useRouteMatch();\r\n//   const [users, setUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\r\n\r\n//   const headerData = [\r\n//     {\r\n//       field: 'firstName', headerName: 'First Name', width: 150,\r\n//       renderCell: (params) => {\r\n//         return (\r\n//           <div\r\n//             style={{ cursor: 'pointer', color: 'blue' }}\r\n//             onClick={() => history.push(`${path}/userUpdate/${params.row.id}`)\r\n//             }\r\n//           >\r\n//             {params.row.firstName}\r\n//           </div >\r\n//         );\r\n//       },\r\n//     },\r\n//     { field: 'lastName', headerName: 'Last Name', width: 150 },\r\n//     { field: 'emailAddress', headerName: 'Email', width: 250 },\r\n//     { field: 'company', headerName: 'Company', width: 200 },\r\n//     { field: 'department', headerName: 'Department', width: 200 },\r\n//     { field: 'manager', headerName: 'Manager', width: 150 },\r\n//     { field: 'userBranch', headerName: 'Location', width: 150 },\r\n//     { field: 'userRole', headerName: 'Role', width: 120 },\r\n//     { field: 'mobileNumber', headerName: 'Mobile Number', width: 150 },\r\n//     { field: 'active', headerName: 'Status', width: 100, renderCell: (params) => (params.value ? 'Active' : 'Inactive') },\r\n//   ];\r\n\r\n//   const processRowUpdate = (newRow) => ({ ...newRow, isNew: false });\r\n\r\n//   const getAllUserDetails = () => {\r\n//     GlobalService.generalSelect(\r\n//       (respdata) => {\r\n//         setUsers(respdata);\r\n//         setLoading(false);\r\n//       },\r\n//       resturls.getUserDetails,\r\n//       {},\r\n//       'GET'\r\n//     );\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getAllUserDetails();\r\n//   }, [isCreateUserOpen]);\r\n\r\n//   return (\r\n//     <>\r\n//       {loading ? <DefaultLoader /> : (\r\n//         <>\r\n//           {isCreateUserOpen ? (\r\n//             <UserDetailsAndEdit isCreateUserOpen={setIsCreateUserOpen} />\r\n//           ) : (\r\n//             <>\r\n//               <Box sx={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>\r\n//                 <Button variant=\"contained\" color=\"primary\" onClick={() => history.push(`${path}/createUser`)}>\r\n//                   Create User\r\n//                 </Button>\r\n//               </Box>\r\n\r\n//               <DataGrid\r\n//                 rows={users}\r\n//                 columns={headerData}\r\n//                 getRowId={(row) => row.id}\r\n//                 pageSizeOptions={[10]}\r\n//                 editMode=\"row\"\r\n//                 processRowUpdate={processRowUpdate}\r\n//                 checkboxSelection={true}\r\n//                 initialState={{\r\n//                   pagination: { paginationModel: { page: 0, pageSize: 10 } },\r\n//                 }}\r\n//                 sx={{\r\n//                   '& .MuiDataGrid-columnHeaders': {\r\n//                     backgroundColor: '#e600e6 !important',\r\n//                   },\r\n//                   '& .MuiDataGrid-columnHeader': {\r\n//                     backgroundColor: '#bfbfbf',\r\n//                     color: \"white\"\r\n//                   },\r\n//                 }}\r\n//               />\r\n//             </>\r\n//           )}\r\n//         </>\r\n//       )}\r\n//     </>\r\n//   );\r\n// }\r\n// import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n// import { useDemoData } from '@mui/x-data-grid-generator';\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { Button, Box, FormControlLabel, Modal } from '@mui/material';\r\nimport DefaultLoader from \"../../global/commonComponents/DefaultLoader\";\r\nimport GlobalService from \"../../services/GlobalService\";\r\n// import FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport { resturls } from \"../../global/utils/apiurls\";\r\n// import UserDetailsAndEdit from \"./UserDetailsAndEdit\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\n// import ManagementUserList from './ManagementUserList';\r\n// import ActiveDirectoryUserList from './ActiveDirectoryUserList';\r\nimport GroupMemberList from './GroupMemberList';\r\nimport GroupAdminList from './GroupAdminList';\r\nimport CreateGroupForm from './CreateGroupForm';\r\nimport ChildGroupList from './ChildGroupList';\r\n\r\nexport default function GroupManagementViewSettingsDetails(props) {\r\n  const { userData, setSelectedUserRows, isKeywordPresent, editDetails, edit, org_id, groupId, groupAdminData, childGroups } = props;\r\n  // const [selectedChildGroup, setSelectedChildGroup] = React.useState({});\r\n  // console.log(selectedChildGroup, 'selectedChildGroup');\r\n  function CustomTabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  CustomTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  };\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', marginTop: '2em', borderRadius: '0.3em' }}>\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\r\n          <Tab label=\"Group Members\" {...a11yProps(0)} />\r\n          <Tab label=\"Group Admins\" {...a11yProps(1)} />\r\n          {/* {edit && <Tab sx={{ color: 'white' }} label=\"Add Child Group\" {...a11yProps(2)} />} */}\r\n        </Tabs>\r\n      </Box>\r\n      {/* <CustomTabPanel value={value} index={0}>\r\n        <GroupMemberList\r\n          edit={edit}\r\n          userData={userData}\r\n          setSelectedUserRows={setSelectedUserRows}\r\n          isKeywordPresent={isKeywordPresent}\r\n        />\r\n      </CustomTabPanel> */}\r\n      {/* <CustomTabPanel value={value} index={1}>\r\n        <GroupAdminList\r\n          edit={edit}\r\n          userData={groupAdminData}\r\n          setSelectedUserRows={setSelectedUserRows}\r\n          isKeywordPresent={isKeywordPresent}\r\n        />\r\n      </CustomTabPanel> */}\r\n      <CustomTabPanel value={value} index={2}>\r\n        {/* {(isKeywordPresent) ? (\r\n          <div style={{ background: 'white', borderRadius: '0.4em' }} >\r\n            <CreateGroupForm\r\n              groupId={groupId}\r\n              organizationId={org_id}\r\n              edit={edit}\r\n              userData={userData}\r\n              setSelectedUserRows={setSelectedUserRows}\r\n            />\r\n            <Modal open >\r\n              <CreateGroupForm\r\n                groupId={groupId}\r\n                organizationId={org_id}\r\n                edit={edit}\r\n                userData={userData}\r\n                setSelectedUserRows={setSelectedUserRows}\r\n              />\r\n            </Modal>\r\n            <Modal\r\n              open={editDetails}\r\n              onClose\r\n              aria-labelledby=\"modal-modal-title\"\r\n              aria-describedby=\"modal-modal-description\">\r\n              <Box sx={style}>\r\n                <CreateGroupForm selectedChildGroup={selectedChildGroup} />\r\n              </Box>\r\n            </Modal>\r\n          </div>\r\n        ) : (\r\n          <ChildGroupList\r\n            edit={edit}\r\n            userData={childGroups}\r\n            setSelectedUserRows={setSelectedUserRows}\r\n            setSelectedChildGroup={setSelectedChildGroup}\r\n          />\r\n        )} */}\r\n        <ChildGroupList\r\n          edit={edit}\r\n          userData={childGroups}\r\n          setSelectedUserRows={setSelectedUserRows}\r\n          editDetails={editDetails}\r\n          isKeywordPresent={isKeywordPresent}\r\n        // setSelectedChildGroup={setSelectedChildGroup}\r\n        />\r\n      </CustomTabPanel>\r\n    </Box>\r\n  );\r\n}\r\n"],"mappingskBAAkB;AAC3C;AACA,SAASC,UAAU,EAAEC,aAAa,QAAQ,kBAAkB;AAC5D,SAASC,MAAM,EAAEC,GAAG,EAAEC,gBAAgB,EAAEC,KAAK,QAAQ,eAAe;AACpE,OAAOC,aAAa,MAAM,6CAA6C;AACvE,OAAOC,aAAa,MAAM,8BAA8B;AACxD;AACA,OAAOC,MAAM,MAAM,sBAAsB;AACzC,SAASC,QAAQ,QAAQ,4BAA4B;AACrD;AACA,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC;AACA;AACA,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,kCAAkCA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAChE,MAAM;IAAEC,QAAQ;IAAEC,mBAAmB;IAAEC,gBAAgB;IAAEC,WAAW;IAAEC,IAAI;IAAEC,MAAM;IAAEC,OAAO;IAAEC,cAAc;IAAEC;EAAY,CAAC,GAAGV,KAAK;EAClI;EACA;EACA,SAASW,cAAcA,CAACX,KAAK,EAAE;IAC7B,MAAM;MAAEY,QAAQ;MAAEC,KAAK;MAAEC,KAAK;MAAE,GAAGC;IAAM,CAAC,GAAGf,KAAK;IAElD,oBACEF,OAAA;MACEkB,IAAI,EAAC,UAAU;MACfC,MAAM,EAAEJ,KAAK,KAAKC,KAAM;MACxBI,EAAE,EAAE,mBAAmBJ,KAAK,EAAG;MAC/B,mBAAiB,cAAcA,KAAK,EAAG;MAAA,GACnCC,KAAK;MAAAH,QAAA,EAERC,KAAK,KAAKC,KAAK,iBAAIhB,OAAA,CAAChB,GAAG;QAACqC,EAAE,EAAE;UAAEC,CAAC,EAAE;QAAE,CAAE;QAAAR,QAAA,EAAEA;MAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC;EAEV;EAEAb,cAAc,CAACc,SAAS,GAAG;IACzBb,QAAQ,EAAEtB,SAAS,CAACoC,IAAI;IACxBZ,KAAK,EAAExB,SAAS,CAACqC,MAAM,CAACC,UAAU;IAClCf,KAAK,EAAEvB,SAAS,CAACqC,MAAM,CAACC;EAC1B,CAAC;EAED,SAASC,SAASA,CAACf,KAAK,EAAE;IACxB,OAAO;MACLI,EAAE,EAAE,cAAcJ,KAAK,EAAE;MACzB,eAAe,EAAE,mBAAmBA,KAAK;IAC3C,CAAC;EACH;EAEA,MAAM,CAACD,KAAK,EAAEiB,QAAQ,CAAC,GAAGzC,KAAK,CAAC0C,QAAQ,CAAC,CAAC,CAAC;EAE3C,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxCJ,QAAQ,CAACI,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEpC,OAAA,CAAChB,GAAG;IAACqC,EAAE,EAAE;MAAEgB,KAAK,EAAE,MAAM;MAAEC,SAAS,EAAE,KAAK;MAAEC,YAAY,EAAE;IAAQ,CAAE;IAAAzB,QAAA,gBAClEd,OAAA,CAAChB,GAAG;MAACqC,EAAE,EAAE;QAAEmB,YAAY,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAU,CAAE;MAAA3B,QAAA,eACnDd,OAAA,CAACP,IAAI;QAACsB,KAAK,EAAEA,KAAM;QAAC2B,QAAQ,EAAER,YAAa;QAAC,cAAW,oBAAoB;QAAApB,QAAA,gBACzEd,OAAA,CAACN,GAAG;UAACiD,KAAK,EAAC,eAAe;UAAA,GAAKZ,SAAS,CAAC,CAAC;QAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC/C1B,OAAA,CAACN,GAAG;UAACiD,KAAK,EAAC,cAAc;UAAA,GAAKZ,SAAS,CAAC,CAAC;QAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eAiBN1B,OAAA,CAACa,cAAc;MAACE,KAAK,EAAEA,KAAM;MAACC,KAAK,EAAE,CAAE;MAAAF,QAAA,eAqCrCd,OAAA,CAACF,cAAc;QACbU,IAAI,EAAEA,IAAK;QACXJ,QAAQ,EAAEQ,WAAY;QACtBP,mBAAmB,EAAEA,mBAAoB;QACzCE,WAAW,EAAEA,WAAY;QACzBD,gBAAgB,EAAEA;QACpB;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACY,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAACvB,EAAA,CAhHuBF,kCAAkC;AAAA2C,EAAA,GAAlC3C,kCAAkC;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}