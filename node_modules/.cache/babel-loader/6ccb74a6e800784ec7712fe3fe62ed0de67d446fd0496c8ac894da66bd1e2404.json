{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Pages\\\\endUser\\\\MyIncidentList.js\",\n  _s = $RefreshSig$();\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport GlobalService from \"../../services/GlobalService\";\nimport { resturls } from \"../../global/utils/apiurls\";\nimport { useHistory, useRouteMatch } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\nimport { Skeleton } from \"@mui/material\";\nimport { useAuth } from \"../../application/modules/auth/hooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyIncidentList() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [IncidentData, setIncidentData] = useState([]);\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    user_auth\n  } = useAuth();\n  const navigate = useHistory();\n  const {\n    theme\n  } = useTheme();\n  const handleCellClick = params => {\n    navigate.push(`${path}/update_incident/${params.row.incidentId}?noBanner=true`);\n  };\n  const fetchUserIncident = () => {\n    GlobalService.generalSelect(response => {\n      const {\n        estatus,\n        data\n      } = response;\n      if (estatus) {\n        setIncidentData(data);\n        setLoading(false);\n      }\n    }, `${resturls.fetchUserIncident}/${user_auth.userId}`, {}, 'GET');\n  };\n  const headers = useMemo(() => {\n    const excludeFields = [\"id\", \"notes\", \"assignGroup\", \"category\", \"subCategory\", \"service\", \"serviceCategory\", \"configurationItem\", \"impactReason\", \"urgencyReason\", \"createdBy\", \"shortDescription\", \"description\", \"callerDepartment\", \"updatedBy\"];\n    const dynamicHeaders = Object.keys(IncidentData[0] || {}).filter(key => !excludeFields.includes(key)) // Exclude the 'notes' field\n    .map((key, index) => {\n      if (index === 0) {\n        return {\n          field: key,\n          headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\n          .replace(/[_]/g, \" \") // Replace underscores with spaces\n          .toLowerCase() // Convert all to lowercase\n          .replace(/\\b\\w/g, char => char.toUpperCase()),\n          // Capitalize first letter of each word\n          width: 200,\n          renderCell: params => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              textDecoration: \"underline\",\n              color: \"#1976d2\",\n              cursor: \"pointer\"\n            },\n            children: params.value || \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)\n        };\n      }\n      switch (key) {\n        case \"caller\":\n        case \"callerDepartment\":\n        case \"assignGroup\":\n        case \"assignedTo\":\n          return {\n            field: key,\n            headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\n            .replace(/[_]/g, \" \") // Replace underscores with spaces\n            .toLowerCase() // Convert all to lowercase\n            .replace(/\\b\\w/g, char => char.toUpperCase()),\n            // Capitalize first letter of each word\n            width: 200,\n            renderCell: params => {\n              var _params$value;\n              return ((_params$value = params.value) === null || _params$value === void 0 ? void 0 : _params$value.name) || \"N/A\";\n            }\n          };\n        default:\n          return {\n            field: key,\n            headerName: key.replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\n            .replace(/[_]/g, \" \") // Replace underscores with spaces\n            .toLowerCase() // Convert all to lowercase\n            .replace(/\\b\\w/g, char => char.toUpperCase()),\n            width: 150\n          };\n      }\n    });\n    return dynamicHeaders;\n  }, [IncidentData]);\n  useEffect(() => {\n    fetchUserIncident();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '2em'\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      variant: \"rectangular\",\n      height: 600\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: IncidentData,\n      columns: headers,\n      getRowId: row => row.incidentId || row.id,\n      onCellClick: handleCellClick,\n      pageSizeOptions: [10],\n      disableRowSelectionOnClick: true,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            page: 0,\n            pageSize: 10\n          }\n        }\n      },\n      sx: {\n        borderRadius: 1,\n        '& .MuiDataGrid-columnHeaders': {\n          '& .MuiDataGrid-row--borderBottom': {\n            background: `${theme.outerBodyColor}`,\n            color: `${theme.tableFontColor}`\n          }\n        },\n        '& .MuiDataGrid-rowHeader': {\n          background: `${theme.outerBodyColor}`,\n          color: `${theme.fontColor}`\n        },\n        '& .MuiDataGrid-row--borderBottom': {\n          borderBottom: '2px solid #cccccc'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(MyIncidentList, \"YvCu3331/ATXELlUXkzZIlT/K1U=\", false, function () {\n  return [useRouteMatch, useAuth, useHistory, useTheme];\n});\n_c = MyIncidentList;\nvar _c;\n$RefreshReg$(_c, \"MyIncidentList\");","map":{"version":3,"names":["DataGrid","React","useEffect","useMemo","useState","GlobalService","resturls","useHistory","useRouteMatch","useTheme","Skeleton","useAuth","jsxDEV","_jsxDEV","MyIncidentList","_s","loading","setLoading","IncidentData","setIncidentData","path","user_auth","navigate","theme","handleCellClick","params","push","row","incidentId","fetchUserIncident","generalSelect","response","estatus","data","userId","headers","excludeFields","dynamicHeaders","Object","keys","filter","key","includes","map","index","field","headerName","replace","toLowerCase","char","toUpperCase","width","renderCell","style","textDecoration","color","cursor","children","value","fileName","_jsxFileName","lineNumber","columnNumber","_params$value","name","margin","variant","height","rows","columns","getRowId","id","onCellClick","pageSizeOptions","disableRowSelectionOnClick","initialState","pagination","paginationModel","page","pageSize","sx","borderRadius","background","outerBodyColor","tableFontColor","fontColor","borderBottom","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Pages/endUser/MyIncidentList.js"],"sourcesContent":["import { DataGrid } from \"@mui/x-data-grid\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport GlobalService from \"../../services/GlobalService\";\r\nimport { resturls } from \"../../global/utils/apiurls\";\r\nimport {\r\n  useHistory,\r\n  useRouteMatch,\r\n} from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useTheme } from \"../../global/commonComponents/ThemeContext\";\r\nimport { Skeleton } from \"@mui/material\";\r\nimport { useAuth } from \"../../application/modules/auth/hooks/useAuth\";\r\n\r\nexport default function MyIncidentList() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [IncidentData, setIncidentData] = useState([]);\r\n  const { path } = useRouteMatch();\r\n  const { user_auth } = useAuth();\r\n  const navigate = useHistory();\r\n  const { theme } = useTheme();\r\n\r\n  const handleCellClick = (params) => {\r\n    navigate.push(`${path}/update_incident/${params.row.incidentId}?noBanner=true`);\r\n  };\r\n\r\n\r\n  const fetchUserIncident = () => {\r\n    GlobalService.generalSelect(\r\n      (response) => {\r\n        const { estatus, data } = response;\r\n        if (estatus) {\r\n          setIncidentData(data);\r\n          setLoading(false);\r\n        }\r\n      },\r\n      `${resturls.fetchUserIncident}/${user_auth.userId}`, {},\r\n      'GET'\r\n    );\r\n  }\r\n\r\n  const headers = useMemo(() => {\r\n    const excludeFields = [\"id\", \"notes\", \"assignGroup\", \"category\", \"subCategory\", \"service\", \"serviceCategory\", \"configurationItem\", \"impactReason\", \"urgencyReason\", \"createdBy\", \"shortDescription\", \"description\", \"callerDepartment\", \"updatedBy\"];\r\n    const dynamicHeaders = Object.keys(IncidentData[0] || {})\r\n      .filter((key) => !excludeFields.includes(key)) // Exclude the 'notes' field\r\n      .map((key, index) => {\r\n        if (index === 0) {\r\n          return {\r\n            field: key,\r\n            headerName: key\r\n              .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\r\n              .replace(/[_]/g, \" \") // Replace underscores with spaces\r\n              .toLowerCase() // Convert all to lowercase\r\n              .replace(/\\b\\w/g, (char) => char.toUpperCase()), // Capitalize first letter of each word\r\n            width: 200,\r\n            renderCell: (params) => (\r\n              <span\r\n                style={{\r\n                  textDecoration: \"underline\",\r\n                  color: \"#1976d2\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                {params.value || \"N/A\"}\r\n              </span>\r\n            ),\r\n          };\r\n        }\r\n        switch (key) {\r\n          case \"caller\":\r\n          case \"callerDepartment\":\r\n          case \"assignGroup\":\r\n          case \"assignedTo\":\r\n            return {\r\n              field: key,\r\n              headerName: key\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\r\n                .replace(/[_]/g, \" \") // Replace underscores with spaces\r\n                .toLowerCase() // Convert all to lowercase\r\n                .replace(/\\b\\w/g, (char) => char.toUpperCase()), // Capitalize first letter of each word\r\n              width: 200,\r\n              renderCell: (params) => params.value?.name || \"N/A\",\r\n            };\r\n          default:\r\n            return {\r\n              field: key,\r\n              headerName: key\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between camel case\r\n                .replace(/[_]/g, \" \") // Replace underscores with spaces\r\n                .toLowerCase() // Convert all to lowercase\r\n                .replace(/\\b\\w/g, (char) => char.toUpperCase()),\r\n              width: 150,\r\n            };\r\n        }\r\n      });\r\n    return dynamicHeaders;\r\n  }, [IncidentData]);\r\n\r\n  useEffect(() => {\r\n    fetchUserIncident();\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ margin: '2em' }}>\r\n      {loading ? (\r\n        <Skeleton variant=\"rectangular\" height={600} />\r\n      ) : (\r\n        <DataGrid\r\n          rows={IncidentData}\r\n          columns={headers}\r\n          getRowId={(row) => row.incidentId || row.id}\r\n          onCellClick={handleCellClick}\r\n          pageSizeOptions={[10]}\r\n          disableRowSelectionOnClick\r\n          initialState={{\r\n            pagination: { paginationModel: { page: 0, pageSize: 10 } },\r\n          }}\r\n          sx={{\r\n            borderRadius: 1,\r\n            '& .MuiDataGrid-columnHeaders': {\r\n              '& .MuiDataGrid-row--borderBottom': {\r\n                background: `${theme.outerBodyColor}`,\r\n                color: `${theme.tableFontColor}`,\r\n              }\r\n            },\r\n            '& .MuiDataGrid-rowHeader': {\r\n              background: `${theme.outerBodyColor}`,\r\n              color: `${theme.fontColor}`,\r\n            },\r\n            '& .MuiDataGrid-row--borderBottom': {\r\n              borderBottom: '2px solid #cccccc',\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}