{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\development_loc\\\\itsm_frontend\\\\src\\\\Components\\\\Request Management\\\\Main Component\\\\GeneralService.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CmdbGridContainer from '../../HelperComponents/GridContainer';\nimport ContentDevider from '../../HelperComponents/ContentDevider';\nimport { OrgOptions } from '../../../Utils/CMDB-Data/CIData';\n// import { userBase } from '../../../Utils/CMDB-Data/serviceData';\nimport { serviceRequestType } from '../../../Utils/Request Data/RequestItemData';\nimport { Stack, Button, MenuItem, FormControl, InputLabel } from '@mui/material';\n// import { RequestContext } from '../../../Routes/HomeRouter';\n// import { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { serverAPI } from '../../../Utils/Server';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setRequestGeneralService } from '../../../Redux state management/Redux Slices/RequestSlice';\nimport StepperComponent from '../../HelperComponents/StepperComponent';\nimport { setActiveStep } from '../../../Redux state management/Redux Slices/GlobalStepperSlice';\nimport SearchTextField from '../../HelperComponents/SearchTextField';\n// import { setEndUserIncident } from '../../../Redux state management/Redux Slices/IncidentRequestSlice';\nimport DraggableModal from '../../User Management/DraggableModal';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport GlobalService from '../../../services/GlobalService';\nimport { resturls } from '../../../global/utils/apiurls';\nimport { Formik, Form, Field } from \"formik\";\nimport { CustomSelect, CustomTextField, StyledFormContainer, StyledIcon, StyledPatternL, StyledPatternR } from '../../../commonComponents/StyledComponents';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GeneralService() {\n  _s();\n  // const{requestGeneralService,setRequestGeneralService}=useContext(RequestContext); \n  // const dispatch = useDispatch();\n  // const requestGeneralService = useSelector((state) => state.requestReducers.requestGeneralService);\n  // const requestDetails = useSelector((state) => state.requestReducers.requestDetails);\n\n  // const activeStep = useSelector((state) => state.globalReducers.activeStep);\n\n  const Navigate = useHistory();\n  const [requestNumber, setRequestNumber] = React.useState(\"\");\n  const [approvalStatus, setApprovalStatus] = React.useState(\"\");\n  const [requesterName, setRequesterName] = React.useState(localStorage.getItem(\"userEmail\"));\n  // const OrgOptions = [\"Organization 1\",\"Organization 2\",\"Organization 3\"];\n  const approvedData = [\"Approved\", \"Denied\", \"Pending\"];\n  const [buttonDisabled, setButtonDisabled] = React.useState(false);\n  const [serviceType, setServiceType] = useState(\"\");\n  const [requesterEmail, setRequesterEmail] = useState();\n  const [openedDate, setOpenedDate] = useState(\"\");\n  useEffect(() => {\n    countRequest();\n    // dispatch(setActiveStep(activeStep + 1));\n  }, []);\n  async function countRequest() {\n    // await axios.get(`${serverAPI}/allServiceRequestCount`).then((res) => {\n    //   if (res.data) {\n    //     setRequestNumber(`REQ-GR-24-00000${parseInt(res.data.responseData) + 1}`)\n    //   }\n    // }).catch((err) => { console.log(err) })\n    GlobalService.generalSelect(respdata => {\n      const {\n        estatus,\n        emessage,\n        data\n      } = respdata;\n      if (estatus && emessage) {\n        setRequestNumber(`REQ-GR-24-00000${parseInt(data.responseData) + 1}`);\n      }\n    }, resturls.allGeneralRequestCount, {}, 'GET');\n  }\n  console.log(OrgOptions, 'OrgOptions');\n  function storeRequestData() {\n    // dispatch(setRequestGeneralService({\n    //   requestNumber,\n    //   approvalStatus,\n    //   // requesterName,\n    //   requesterEmail,\n    //   requestType: serviceType,\n    //   // requestedDate,\n    //   requesterServiceType: serviceType,\n    //   openedDate\n    // }))\n    Navigate(`/request-service/general-service/${serviceType}`);\n  }\n  useEffect(() => {\n    //  setRequestNumber(requestGeneralService.requestNumber);\n    // setServiceType(requestGeneralService.requestType || \"\");\n    // setApprovalStatus(requestGeneralService.approvalStatus || \"\");\n    // setRequesterName(requestGeneralService.requesterName || localStorage.getItem(\"userEmail\"));\n    // setOpenedDate(requestGeneralService.openedDate || \"\");\n    // setServiceType(requestGeneralService.requesterServiceType || \"\");\n\n    // // Auto-fill requester email from requestGeneralService or default\n    // setRequesterEmail(requestGeneralService.requesterEmail || \"user@teksiblegroup.com\");\n  }, []);\n  const [itemOpen, setItemOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setItemOpen(true);\n  };\n\n  // const endUserIncident = useSelector((state) => state.incidentReducers.endUserIncident)\n  useEffect(() => {\n    // setRequesterName(endUserIncident.Email);\n  }, []);\n  const handleItemClose = () => {\n    setItemOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StepperComponent, {\n      steps: [\"General Information\", \"Technical Information\", \"Submit Request\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentDevider, {\n      title: \"General Service Request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          requestname: localStorage.getItem(\"userName\"),\n          requestType: \"\",\n          requestedFor: requesterEmail\n        }\n        // validationSchema={validationSchema}\n        ,\n        onSubmit: values => {\n          console.log(values);\n        },\n        children: ({\n          errors,\n          touched,\n          setFieldValue,\n          values\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(StyledFormContainer, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"requestname\",\n                as: CustomTextField,\n                label: \"Request Name\",\n                error: touched.requestname && !!errors.requestname,\n                helperText: touched.requestname && errors.requestname,\n                disabled: true,\n                InputLabelProps: {\n                  shrink: true\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(StyledPatternL, {\n                style: {\n                  opacity: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              style: {\n                position: \"relative\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                id: \"requestType-label\",\n                children: \"Request Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: CustomSelect,\n                name: \"requestType\",\n                labelId: \"requestType-label\"\n                // disabled\n                ,\n                children: serviceRequestType.map(ele => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: ele.value,\n                  children: ele.value\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(StyledPatternL, {\n                style: {\n                  opacity: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: \"relative\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                name: \"requestedFor\",\n                as: CustomTextField,\n                label: \"Requested For\",\n                error: touched.caller && !!errors.caller,\n                helperText: touched.caller && errors.caller,\n                disabled: true,\n                value: requesterEmail,\n                InputLabelProps: {\n                  shrink: true\n                } // Ensures the label does not overlap\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(StyledIcon, {\n                src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9DY1tjGc0WbPmAFUTZRtS0YTRq4m7Q6Dpdw&s\",\n                alt: \"AI Icon\",\n                onClick: () => {\n                  setItemOpen(true);\n                  ;\n                },\n                style: {\n                  opacity: 1,\n                  width: 35,\n                  height: 35\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(StyledPatternR, {\n                style: {\n                  opacity: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DraggableModal, {\n      open: itemOpen,\n      setRequesterEmail: setRequesterEmail,\n      setOpen: setItemOpen,\n      handleClickOpen: handleClickOpen,\n      handleClose: handleItemClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      style: {\n        display: 'flex',\n        alignItems: \"center\",\n        justifyContent: \"space-around\",\n        paddingRight: 20,\n        paddingTop: 50\n      },\n      direction: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        disabled: !serviceType ? true : false,\n        color: \"warning\",\n        style: {\n          width: 100\n        },\n        onClick: () => {\n          Navigate(-1);\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        disabled: !serviceType ? true : false,\n        color: \"warning\",\n        style: {\n          width: 100\n        },\n        onClick: () => {\n          storeRequestData();\n        },\n        children: \"Next \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(GeneralService, \"AMXz71dyCnmgjo8yvU4NnDwXvQw=\", false, function () {\n  return [useHistory];\n});\n_c = GeneralService;\nvar _c;\n$RefreshReg$(_c, \"GeneralService\");","map":{"version":3,"names":["React","useState","useEffect","CmdbGridContainer","ContentDevider","OrgOptions","serviceRequestType","Stack","Button","MenuItem","FormControl","InputLabel","axios","serverAPI","useDispatch","useSelector","setRequestGeneralService","StepperComponent","setActiveStep","SearchTextField","DraggableModal","useHistory","GlobalService","resturls","Formik","Form","Field","CustomSelect","CustomTextField","StyledFormContainer","StyledIcon","StyledPatternL","StyledPatternR","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneralService","_s","Navigate","requestNumber","setRequestNumber","approvalStatus","setApprovalStatus","requesterName","setRequesterName","localStorage","getItem","approvedData","buttonDisabled","setButtonDisabled","serviceType","setServiceType","requesterEmail","setRequesterEmail","openedDate","setOpenedDate","countRequest","generalSelect","respdata","estatus","emessage","data","parseInt","responseData","allGeneralRequestCount","console","log","storeRequestData","itemOpen","setItemOpen","handleClickOpen","handleItemClose","children","steps","fileName","_jsxFileName","lineNumber","columnNumber","title","style","width","marginTop","initialValues","requestname","requestType","requestedFor","onSubmit","values","errors","touched","setFieldValue","position","name","as","label","error","helperText","disabled","InputLabelProps","shrink","opacity","id","labelId","map","ele","value","caller","src","alt","onClick","height","open","setOpen","handleClose","display","alignItems","justifyContent","paddingRight","paddingTop","direction","variant","color","_c","$RefreshReg$"],"sources":["C:/Users/DELL/development_loc/itsm_frontend/src/Components/Request Management/Main Component/GeneralService.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CmdbGridContainer from '../../HelperComponents/GridContainer';\r\nimport ContentDevider from '../../HelperComponents/ContentDevider';\r\nimport { OrgOptions } from '../../../Utils/CMDB-Data/CIData';\r\n// import { userBase } from '../../../Utils/CMDB-Data/serviceData';\r\nimport { serviceRequestType } from '../../../Utils/Request Data/RequestItemData';\r\nimport { Stack, Button, MenuItem, FormControl, InputLabel } from '@mui/material';\r\n// import { RequestContext } from '../../../Routes/HomeRouter';\r\n// import { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { serverAPI } from '../../../Utils/Server';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setRequestGeneralService } from '../../../Redux state management/Redux Slices/RequestSlice';\r\nimport StepperComponent from '../../HelperComponents/StepperComponent';\r\nimport { setActiveStep } from '../../../Redux state management/Redux Slices/GlobalStepperSlice';\r\nimport SearchTextField from '../../HelperComponents/SearchTextField';\r\n// import { setEndUserIncident } from '../../../Redux state management/Redux Slices/IncidentRequestSlice';\r\nimport DraggableModal from '../../User Management/DraggableModal';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport GlobalService from '../../../services/GlobalService';\r\nimport { resturls } from '../../../global/utils/apiurls';\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { CustomSelect, CustomTextField, StyledFormContainer, StyledIcon, StyledPatternL, StyledPatternR } from '../../../commonComponents/StyledComponents';\r\n\r\nexport default function GeneralService() {\r\n\r\n  // const{requestGeneralService,setRequestGeneralService}=useContext(RequestContext); \r\n  // const dispatch = useDispatch();\r\n  // const requestGeneralService = useSelector((state) => state.requestReducers.requestGeneralService);\r\n  // const requestDetails = useSelector((state) => state.requestReducers.requestDetails);\r\n\r\n  // const activeStep = useSelector((state) => state.globalReducers.activeStep);\r\n\r\n  const Navigate = useHistory();\r\n\r\n  const [requestNumber, setRequestNumber] = React.useState(\"\");\r\n  const [approvalStatus, setApprovalStatus] = React.useState(\"\");\r\n  const [requesterName, setRequesterName] = React.useState(localStorage.getItem(\"userEmail\"));\r\n  // const OrgOptions = [\"Organization 1\",\"Organization 2\",\"Organization 3\"];\r\n  const approvedData = [\"Approved\", \"Denied\", \"Pending\"];\r\n  const [buttonDisabled, setButtonDisabled] = React.useState(false);\r\n  const [serviceType, setServiceType] = useState(\"\");\r\n  const [requesterEmail, setRequesterEmail] = useState();\r\n\r\n\r\n  const [openedDate, setOpenedDate] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    countRequest();\r\n    // dispatch(setActiveStep(activeStep + 1));\r\n  }, [])\r\n  async function countRequest() {\r\n    // await axios.get(`${serverAPI}/allServiceRequestCount`).then((res) => {\r\n    //   if (res.data) {\r\n    //     setRequestNumber(`REQ-GR-24-00000${parseInt(res.data.responseData) + 1}`)\r\n    //   }\r\n    // }).catch((err) => { console.log(err) })\r\n    GlobalService.generalSelect(\r\n      (respdata) => {\r\n        const { estatus, emessage, data } = respdata;\r\n        if (estatus && emessage) {\r\n          setRequestNumber(`REQ-GR-24-00000${parseInt(data.responseData) + 1}`)\r\n        }\r\n      },\r\n      resturls.allGeneralRequestCount,\r\n      {},\r\n      'GET'\r\n    );\r\n  }\r\n\r\n  console.log(OrgOptions, 'OrgOptions');\r\n\r\n  function storeRequestData() {\r\n    // dispatch(setRequestGeneralService({\r\n    //   requestNumber,\r\n    //   approvalStatus,\r\n    //   // requesterName,\r\n    //   requesterEmail,\r\n    //   requestType: serviceType,\r\n    //   // requestedDate,\r\n    //   requesterServiceType: serviceType,\r\n    //   openedDate\r\n    // }))\r\n    Navigate(`/request-service/general-service/${serviceType}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    //  setRequestNumber(requestGeneralService.requestNumber);\r\n    // setServiceType(requestGeneralService.requestType || \"\");\r\n    // setApprovalStatus(requestGeneralService.approvalStatus || \"\");\r\n    // setRequesterName(requestGeneralService.requesterName || localStorage.getItem(\"userEmail\"));\r\n    // setOpenedDate(requestGeneralService.openedDate || \"\");\r\n    // setServiceType(requestGeneralService.requesterServiceType || \"\");\r\n\r\n    // // Auto-fill requester email from requestGeneralService or default\r\n    // setRequesterEmail(requestGeneralService.requesterEmail || \"user@teksiblegroup.com\");\r\n  }, [])\r\n\r\n  const [itemOpen, setItemOpen] = React.useState(false);\r\n  const handleClickOpen = () => {\r\n    setItemOpen(true);\r\n  };\r\n\r\n  // const endUserIncident = useSelector((state) => state.incidentReducers.endUserIncident)\r\n  useEffect(() => {\r\n    // setRequesterName(endUserIncident.Email);\r\n  }, []);\r\n\r\n  const handleItemClose = () => {\r\n    setItemOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StepperComponent steps={[\"General Information\", \"Technical Information\", \"Submit Request\"]} />\r\n\r\n      <ContentDevider title=\"General Service Request\" />\r\n      {/* <CmdbGridContainer show={[true, true, false, false]} dropdown={[false, true]} name={[\"Request Number\", \"Request service type\"]} Name1={requestNumber} setName1={setRequestNumber} SelectedValue2={serviceType} setSelectValue2={setServiceType} label={[\"Requested Date\", \"\"]} MenuItems={[OrgOptions, serviceRequestType]} /> */}\r\n\r\n      <div style={{ width: '100%', marginTop: 20, }} >\r\n        <Formik\r\n          initialValues={{\r\n            requestname: localStorage.getItem(\"userName\"),\r\n            requestType: \"\",\r\n            requestedFor: requesterEmail,\r\n          }}\r\n          // validationSchema={validationSchema}\r\n          onSubmit={(values) => {\r\n            console.log(values);\r\n          }}\r\n        >\r\n          {({ errors, touched, setFieldValue, values }) => (\r\n            <Form>\r\n              {/* <HeaderContainer>\r\n                <GradientHeader>Create Incident</GradientHeader>\r\n                <StyledButton type=\"submit\">Create New Incident</StyledButton>\r\n              </HeaderContainer> */}\r\n              <StyledFormContainer>\r\n                <div style={{ position: \"relative\" }}>\r\n                  <Field\r\n                    name=\"requestname\"\r\n                    as={CustomTextField}\r\n                    label=\"Request Name\"\r\n                    error={touched.requestname && !!errors.requestname}\r\n                    helperText={touched.requestname && errors.requestname}\r\n                    disabled={true}\r\n                    InputLabelProps={{ shrink: true }}\r\n                  />\r\n                  <StyledPatternL style={{ opacity: 1 }} />\r\n                </div>\r\n                <FormControl style={{ position: \"relative\" }}>\r\n                  <InputLabel id=\"requestType-label\">Request Type</InputLabel>\r\n                  <Field\r\n                    as={CustomSelect}\r\n                    name=\"requestType\"\r\n                    labelId=\"requestType-label\"\r\n                  // disabled\r\n                  >\r\n                    {serviceRequestType.map((ele) => (\r\n                      <MenuItem value={ele.value}>{ele.value}</MenuItem>\r\n                    ))}\r\n                  </Field>\r\n                  <StyledPatternL style={{ opacity: 1 }} />\r\n                </FormControl>\r\n                <div style={{ position: \"relative\" }}>\r\n                  <Field\r\n                    name=\"requestedFor\"\r\n                    as={CustomTextField}\r\n                    label=\"Requested For\"\r\n                    error={touched.caller && !!errors.caller}\r\n                    helperText={touched.caller && errors.caller}\r\n                    disabled={true}\r\n                    value={requesterEmail}\r\n                    InputLabelProps={{ shrink: true }} // Ensures the label does not overlap\r\n                  />\r\n                  <StyledIcon\r\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9DY1tjGc0WbPmAFUTZRtS0YTRq4m7Q6Dpdw&s\"\r\n                    alt=\"AI Icon\"\r\n                    onClick={() => {\r\n                      setItemOpen(true);;\r\n                    }}\r\n                    style={{ opacity: 1, width: 35, height: 35 }}\r\n                  />\r\n                  <StyledPatternR style={{ opacity: 1 }} />\r\n                </div>\r\n              </StyledFormContainer>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        {/* <SearchTextField search={true} fieldValue={requesterName} setFieldValue={setRequesterName} handleClickOpen={handleClickOpen} style={{ width: \"100%\" }} placeholder=\"Requested For\" /> */}\r\n        {/* SelectedValue2={requesterName} setSelectValue2={setRequesterName} */}\r\n      </div>\r\n\r\n      {/* <CmdbGridContainer show={[false,true,false,false]}  dropdown={[false,true ]} name={[\"Requester Email Id\",\"Request service type\"]} Name1={requesterEmail} setName1={setRequesterEmail} Name2={requesterName} setName2={setRequesterName}    label={[\"Requested Date\",\"\"]} MenuItems={[OrgOptions,serviceRequestType]}/> */}\r\n\r\n      {/* <CmdbGridContainer show={[false,false,true,false]}  dropdown={[false,false ]} name={[\"Requester Email Id\",\"Request service type\"]} Name1={requesterEmail} setName1={setRequesterEmail} Name2={requesterName} setName2={setRequesterName}  SelectedValue2={serviceType} setSelectValue2={setServiceType}  label={[\"Opened Date\",\"\"]} MenuItems={[OrgOptions,serviceRequestType]} Date1={openedDate} setDate1={setOpenedDate}/> */}\r\n      <DraggableModal open={itemOpen} setRequesterEmail={setRequesterEmail} setOpen={setItemOpen} handleClickOpen={handleClickOpen} handleClose={handleItemClose} />\r\n\r\n      <Stack style={{ display: 'flex', alignItems: \"center\", justifyContent: \"space-around\", paddingRight: 20, paddingTop: 50 }} direction=\"row\">\r\n        <Button variant=\"outlined\" disabled={!serviceType ? true : false} color=\"warning\" style={{ width: 100 }} onClick={() => { Navigate(-1); }}>Back</Button>\r\n        <Button variant=\"outlined\" disabled={!serviceType ? true : false} color=\"warning\" style={{ width: 100 }} onClick={() => { storeRequestData(); }}>Next </Button>\r\n      </Stack>\r\n    </>\r\n  )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}