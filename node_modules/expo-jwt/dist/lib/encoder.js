"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var enc_base64_1 = __importDefault(require("crypto-js/enc-base64"));
var enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
var errors_1 = require("./errors");
var algorithms_1 = __importDefault(require("./algorithms"));
var helpers_1 = require("./helpers");
var algorithms_2 = require("../types/algorithms");
var _key;
var stripAlgorithmOptions = function (options) {
    var algorithm = options.algorithm, alg = options.alg, strippedOptions = __rest(options, ["algorithm", "alg"]);
    return strippedOptions;
};
var Encoder = /** @class */ (function () {
    function Encoder(body, key, headerOptions) {
        if (headerOptions === void 0) { headerOptions = {}; }
        this.body = body;
        this.header = __assign({ alg: headerOptions.algorithm ||
                headerOptions.alg ||
                algorithms_2.SupportedAlgorithms.HS256, typ: 'JWT' }, stripAlgorithmOptions(headerOptions));
        _key = key;
    }
    Encoder.prototype.buildHeader = function () {
        // This function is somewhat unecessary now but it is needed for backwards compatibility
        // Possible alias it to getHeader in future, or strip out fully in 2.0
        return this.header;
    };
    Encoder.prototype.encodeAndSign = function () {
        var jsonHeader = JSON.stringify(this.header);
        var jsonBody = JSON.stringify(this.body);
        var base64Header = enc_base64_1.default.stringify(enc_utf8_1.default.parse(jsonHeader));
        var base64Body = enc_base64_1.default.stringify(enc_utf8_1.default.parse(jsonBody));
        var encodedHeader = (0, helpers_1.urlEncodeBase64)(base64Header);
        var encodedBody = (0, helpers_1.urlEncodeBase64)(base64Body);
        if (!this.header.alg || this.header.alg === 'none') {
            return "".concat(encodedHeader, ".").concat(encodedBody, ".");
        }
        var algorithm = algorithms_1.default[this.header.alg];
        if (!algorithm) {
            throw new errors_1.AlgorithmNotSupported();
        }
        var signature = algorithm("".concat(encodedHeader, ".").concat(encodedBody), _key);
        var encodedSignature = signature.toString(enc_base64_1.default);
        var urlSafeEncodedSignature = (0, helpers_1.urlEncodeBase64)(encodedSignature);
        return "".concat(encodedHeader, ".").concat(encodedBody, ".").concat(urlSafeEncodedSignature);
    };
    return Encoder;
}());
exports.default = Encoder;
